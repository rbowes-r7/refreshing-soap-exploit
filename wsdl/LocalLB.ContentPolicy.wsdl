<?xml version="1.0" ?>
<!--
Copyright (c) 1996-2018, F5 Networks, Inc., Seattle, Washington. All rights reserved.  

F5, F5 Networks, the F5 logo, BIG-IP, 3-DNS, iControl, GLOBAL-SITE, SEE-IT, EDGE-FX, FireGuard, Internet Control Architecture, IP Application Switch, iRules, PACKET VELOCITY, SYN Check, CONTROL YOUR WORLD, OneConnect, ZoneRunner, uRoam, FirePass, and TrafficShield are registered trademarks or trademarks of F5 Networks, Inc., in the U.S. and certain other countries. 

All other trademarks mentioned in this document are the property of their respective owners. F5 Networks' trademarks may not be used in connection with any product or service except as permitted in writing by F5.

-->
<definitions name="LocalLB.ContentPolicy"
	targetNamespace="urn:iControl"
	xmlns:tns="urn:iControl"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
	xmlns="http://schemas.xmlsoap.org/wsdl/">

<!-- types -->

<types>
	<xsd:schema targetNamespace='urn:iControl'
		xmlns='http://www.w3.org/2001/XMLSchema'
		xmlns:SOAP-ENC='http://schemas.xmlsoap.org/soap/encoding/'
		xmlns:wsdl='http://schemas.xmlsoap.org/wsdl/'>
		<xsd:complexType name="LocalLB.PolicyEventSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:LocalLB.PolicyEvent[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="Common.ULongSequenceSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Common.ULongSequence[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="LocalLB.PolicySelectorSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:LocalLB.PolicySelector[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:simpleType name="LocalLB.PolicySelector">
			<xsd:restriction base="xsd:string">
				<xsd:enumeration value="POLICY_SELECTOR_UNKNOWN">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_UNKNOWN</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_ALL">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_ALL</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_NAME">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_NAME</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_VALUE">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_VALUE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_ADDRESS">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_ADDRESS</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_HEADER">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_HEADER</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_SCHEME">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_SCHEME</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_HOST">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_HOST</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_PORT">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_PORT</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_PATH">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_PATH</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_QUERY_STRING">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_QUERY_STRING</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_EXTENSION">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_EXTENSION</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_PATH_SEGMENT">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_PATH_SEGMENT</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_QUERY_PARAM">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_QUERY_PARAM</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_UNNAMED_QUERY_PARAM">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_UNNAMED_QUERY_PARAM</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_MAJOR">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_MAJOR</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_MINOR">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_MINOR</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_CODE">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_CODE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_TEXT">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_TEXT</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_DOMAIN">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_DOMAIN</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_EXPIRY">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_EXPIRY</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_VERSION">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_VERSION</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_USERNAME">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_USERNAME</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_PASSWORD">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_PASSWORD</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_PROTOCOL">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_PROTOCOL</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_CIPHER">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_CIPHER</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_CIPHER_BITS">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_CIPHER_BITS</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_RTT">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_RTT</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_MSS">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_MSS</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_VLAN">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_VLAN</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_VLAN_ID">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_VLAN_ID</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_ROUTE_DOMAIN">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_ROUTE_DOMAIN</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_SERVER_NAME">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_SERVER_NAME</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_COMMON_NAME">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_COMMON_NAME</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_NPN">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_NPN</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_ALPN">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_ALPN</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_CONTINENT">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_CONTINENT</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_COUNTRY_CODE">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_COUNTRY_CODE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_COUNTRY_NAME">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_COUNTRY_NAME</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_REGION_NAME">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_REGION_NAME</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_REGION_CODE">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_REGION_CODE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_ORG">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_ORG</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_ISP">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_ISP</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_LAST_15SECS">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_LAST_15SECS</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_LAST_1MIN">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_LAST_1MIN</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_LAST_5MINS">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_LAST_5MINS</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_DEVICE_MAKE">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_DEVICE_MAKE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_DEVICE_MODEL">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_DEVICE_MODEL</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_BROWSER_TYPE">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_BROWSER_TYPE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_BROWSER_VERSION">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_BROWSER_VERSION</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_SELECTOR_UA_TOKEN">
					<xsd:annotation>
						<xsd:documentation>POLICY_SELECTOR_UA_TOKEN</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
			</xsd:restriction>
		</xsd:simpleType>
		<xsd:simpleType name="Common.EnabledState">
			<xsd:restriction base="xsd:string">
				<xsd:enumeration value="STATE_DISABLED">
					<xsd:annotation>
						<xsd:documentation>STATE_DISABLED</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="STATE_ENABLED">
					<xsd:annotation>
						<xsd:documentation>STATE_ENABLED</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
			</xsd:restriction>
		</xsd:simpleType>
		<xsd:simpleType name="LocalLB.ContentPolicy.PolicyControls">
			<xsd:restriction base="xsd:string">
				<xsd:enumeration value="POLICY_CONTROLS_UNKNOWN">
					<xsd:annotation>
						<xsd:documentation>POLICY_CONTROLS_UNKNOWN</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_CONTROLS_FORWARDING">
					<xsd:annotation>
						<xsd:documentation>POLICY_CONTROLS_FORWARDING</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_CONTROLS_CACHING">
					<xsd:annotation>
						<xsd:documentation>POLICY_CONTROLS_CACHING</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_CONTROLS_COMPRESSION">
					<xsd:annotation>
						<xsd:documentation>POLICY_CONTROLS_COMPRESSION</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_CONTROLS_WAM">
					<xsd:annotation>
						<xsd:documentation>POLICY_CONTROLS_WAM</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_CONTROLS_ASM">
					<xsd:annotation>
						<xsd:documentation>POLICY_CONTROLS_ASM</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_CONTROLS_AVR">
					<xsd:annotation>
						<xsd:documentation>POLICY_CONTROLS_AVR</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_CONTROLS_L7DOS">
					<xsd:annotation>
						<xsd:documentation>POLICY_CONTROLS_L7DOS</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_CONTROLS_CLASSIFICATION">
					<xsd:annotation>
						<xsd:documentation>POLICY_CONTROLS_CLASSIFICATION</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_CONTROLS_REQUEST_ADAPTATION">
					<xsd:annotation>
						<xsd:documentation>POLICY_CONTROLS_REQUEST_ADAPTATION</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_CONTROLS_RESPONSE_ADAPTATION">
					<xsd:annotation>
						<xsd:documentation>POLICY_CONTROLS_RESPONSE_ADAPTATION</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_CONTROLS_CLIENT_SSL">
					<xsd:annotation>
						<xsd:documentation>POLICY_CONTROLS_CLIENT_SSL</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_CONTROLS_SERVER_SSL">
					<xsd:annotation>
						<xsd:documentation>POLICY_CONTROLS_SERVER_SSL</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_CONTROLS_SSL_INTERCEPT">
					<xsd:annotation>
						<xsd:documentation>POLICY_CONTROLS_SSL_INTERCEPT</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_CONTROLS_PERSISTENCE">
					<xsd:annotation>
						<xsd:documentation>POLICY_CONTROLS_PERSISTENCE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
			</xsd:restriction>
		</xsd:simpleType>
		<xsd:complexType name="LocalLB.PolicyOperandSequenceSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:LocalLB.PolicyOperandSequence[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="LocalLB.PolicyOperandSequenceSequenceSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:LocalLB.PolicyOperandSequenceSequence[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:simpleType name="LocalLB.PolicyOperand">
			<xsd:restriction base="xsd:string">
				<xsd:enumeration value="POLICY_OPERAND_UNKNOWN">
					<xsd:annotation>
						<xsd:documentation>POLICY_OPERAND_UNKNOWN</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_OPERAND_TCP">
					<xsd:annotation>
						<xsd:documentation>POLICY_OPERAND_TCP</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_OPERAND_CLIENT_SSL">
					<xsd:annotation>
						<xsd:documentation>POLICY_OPERAND_CLIENT_SSL</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_OPERAND_HTTP_METHOD">
					<xsd:annotation>
						<xsd:documentation>POLICY_OPERAND_HTTP_METHOD</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_OPERAND_HTTP_URI">
					<xsd:annotation>
						<xsd:documentation>POLICY_OPERAND_HTTP_URI</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_OPERAND_HTTP_VERSION">
					<xsd:annotation>
						<xsd:documentation>POLICY_OPERAND_HTTP_VERSION</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_OPERAND_HTTP_STATUS">
					<xsd:annotation>
						<xsd:documentation>POLICY_OPERAND_HTTP_STATUS</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_OPERAND_HTTP_HOST">
					<xsd:annotation>
						<xsd:documentation>POLICY_OPERAND_HTTP_HOST</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_OPERAND_HTTP_HEADER">
					<xsd:annotation>
						<xsd:documentation>POLICY_OPERAND_HTTP_HEADER</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_OPERAND_HTTP_REFERER">
					<xsd:annotation>
						<xsd:documentation>POLICY_OPERAND_HTTP_REFERER</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_OPERAND_HTTP_COOKIE">
					<xsd:annotation>
						<xsd:documentation>POLICY_OPERAND_HTTP_COOKIE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_OPERAND_HTTP_SET_COOKIE">
					<xsd:annotation>
						<xsd:documentation>POLICY_OPERAND_HTTP_SET_COOKIE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_OPERAND_HTTP_BASIC_AUTH">
					<xsd:annotation>
						<xsd:documentation>POLICY_OPERAND_HTTP_BASIC_AUTH</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_OPERAND_HTTP_USER_AGENT">
					<xsd:annotation>
						<xsd:documentation>POLICY_OPERAND_HTTP_USER_AGENT</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_OPERAND_SSL_EXTENSION">
					<xsd:annotation>
						<xsd:documentation>POLICY_OPERAND_SSL_EXTENSION</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_OPERAND_SSL_CERT">
					<xsd:annotation>
						<xsd:documentation>POLICY_OPERAND_SSL_CERT</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_OPERAND_GEOIP">
					<xsd:annotation>
						<xsd:documentation>POLICY_OPERAND_GEOIP</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_OPERAND_CPU_USAGE">
					<xsd:annotation>
						<xsd:documentation>POLICY_OPERAND_CPU_USAGE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
			</xsd:restriction>
		</xsd:simpleType>
		<xsd:complexType name="Common.StringSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:string[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="LocalLB.PolicyEventSequenceSequenceSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:LocalLB.PolicyEventSequenceSequence[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="LocalLB.PolicyOperandSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:LocalLB.PolicyOperand[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="LocalLB.ContentPolicy.PolicyActionSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:LocalLB.ContentPolicy.PolicyAction[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="LocalLB.ContentPolicy.PolicyRequiresSequenceSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:LocalLB.ContentPolicy.PolicyRequiresSequence[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="LocalLB.ContentPolicy.PolicyControlsSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:LocalLB.ContentPolicy.PolicyControls[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="Common.ULongSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:long[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="Common.StringSequenceSequenceSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Common.StringSequenceSequence[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:simpleType name="LocalLB.ContentPolicy.PolicyCondition">
			<xsd:restriction base="xsd:string">
				<xsd:enumeration value="POLICY_CONDITION_UNKNOWN">
					<xsd:annotation>
						<xsd:documentation>POLICY_CONDITION_UNKNOWN</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_CONDITION_EQUALS">
					<xsd:annotation>
						<xsd:documentation>POLICY_CONDITION_EQUALS</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_CONDITION_STARTS">
					<xsd:annotation>
						<xsd:documentation>POLICY_CONDITION_STARTS</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_CONDITION_ENDS">
					<xsd:annotation>
						<xsd:documentation>POLICY_CONDITION_ENDS</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_CONDITION_CONTAINS">
					<xsd:annotation>
						<xsd:documentation>POLICY_CONDITION_CONTAINS</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_CONDITION_LESS">
					<xsd:annotation>
						<xsd:documentation>POLICY_CONDITION_LESS</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_CONDITION_GREATER">
					<xsd:annotation>
						<xsd:documentation>POLICY_CONDITION_GREATER</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_CONDITION_LESS_OR_EQUAL">
					<xsd:annotation>
						<xsd:documentation>POLICY_CONDITION_LESS_OR_EQUAL</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_CONDITION_GREATER_OR_EQUAL">
					<xsd:annotation>
						<xsd:documentation>POLICY_CONDITION_GREATER_OR_EQUAL</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_CONDITION_MATCHES">
					<xsd:annotation>
						<xsd:documentation>POLICY_CONDITION_MATCHES</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
			</xsd:restriction>
		</xsd:simpleType>
		<xsd:complexType name="Common.EnabledStateSequenceSequenceSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Common.EnabledStateSequenceSequence[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="LocalLB.ContentPolicy.PolicyTargetSequenceSequenceSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:LocalLB.ContentPolicy.PolicyTargetSequenceSequence[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="LocalLB.ContentPolicy.PolicyConditionSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:LocalLB.ContentPolicy.PolicyCondition[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="LocalLB.ContentPolicy.PolicyConditionSequenceSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:LocalLB.ContentPolicy.PolicyConditionSequence[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:simpleType name="LocalLB.ContentPolicy.PolicyRequires">
			<xsd:restriction base="xsd:string">
				<xsd:enumeration value="POLICY_REQUIRES_UNKNOWN">
					<xsd:annotation>
						<xsd:documentation>POLICY_REQUIRES_UNKNOWN</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_REQUIRES_HTTP">
					<xsd:annotation>
						<xsd:documentation>POLICY_REQUIRES_HTTP</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_REQUIRES_TCP">
					<xsd:annotation>
						<xsd:documentation>POLICY_REQUIRES_TCP</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_REQUIRES_CLIENT_SSL">
					<xsd:annotation>
						<xsd:documentation>POLICY_REQUIRES_CLIENT_SSL</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_REQUIRES_SERVER_SSL">
					<xsd:annotation>
						<xsd:documentation>POLICY_REQUIRES_SERVER_SSL</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_REQUIRES_SSL_PERSIST">
					<xsd:annotation>
						<xsd:documentation>POLICY_REQUIRES_SSL_PERSIST</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
			</xsd:restriction>
		</xsd:simpleType>
		<xsd:complexType name="Common.ULongSequenceSequenceSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Common.ULongSequenceSequence[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:simpleType name="LocalLB.ContentPolicy.PolicyTarget">
			<xsd:restriction base="xsd:string">
				<xsd:enumeration value="POLICY_TARGET_UNKNOWN">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_UNKNOWN</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_HTTP">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_HTTP</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_HTTP_METHOD">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_HTTP_METHOD</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_HTTP_URI">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_HTTP_URI</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_HTTP_HOST">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_HTTP_HOST</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_HTTP_HEADER">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_HTTP_HEADER</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_HTTP_REFERER">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_HTTP_REFERER</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_HTTP_COOKIE">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_HTTP_COOKIE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_HTTP_SET_COOKIE">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_HTTP_SET_COOKIE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_HTTP_BASIC_AUTH">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_HTTP_BASIC_AUTH</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_HTTP_REPLY">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_HTTP_REPLY</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_LOG">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_LOG</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_PEM">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_PEM</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_CACHE">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_CACHE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_COMPRESS">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_COMPRESS</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_DECOMPRESS">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_DECOMPRESS</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_FORWARD">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_FORWARD</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_TCP_NAGLE">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_TCP_NAGLE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_WAM">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_WAM</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_ASM">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_ASM</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_L7DOS">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_L7DOS</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_AVR">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_AVR</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_TCL">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_TCL</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_RESPONSE_ADAPT">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_RESPONSE_ADAPT</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_REQUEST_ADAPT">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_REQUEST_ADAPT</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_CLIENT_SSL">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_CLIENT_SSL</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_SERVER_SSL">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_SERVER_SSL</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_SSL_INTERCEPT">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_SSL_INTERCEPT</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_POLICY">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_POLICY</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_TARGET_PERSIST">
					<xsd:annotation>
						<xsd:documentation>POLICY_TARGET_PERSIST</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
			</xsd:restriction>
		</xsd:simpleType>
		<xsd:simpleType name="LocalLB.PolicyEvent">
			<xsd:restriction base="xsd:string">
				<xsd:enumeration value="POLICY_EVENT_UNKNOWN">
					<xsd:annotation>
						<xsd:documentation>POLICY_EVENT_UNKNOWN</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_EVENT_CLIENT_ACCEPTED">
					<xsd:annotation>
						<xsd:documentation>POLICY_EVENT_CLIENT_ACCEPTED</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_EVENT_CLIENTSSL_CLIENTHELLO">
					<xsd:annotation>
						<xsd:documentation>POLICY_EVENT_CLIENTSSL_CLIENTHELLO</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_EVENT_SERVER_CONNECTED">
					<xsd:annotation>
						<xsd:documentation>POLICY_EVENT_SERVER_CONNECTED</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_EVENT_SERVERSSL_SERVERHELLO">
					<xsd:annotation>
						<xsd:documentation>POLICY_EVENT_SERVERSSL_SERVERHELLO</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_EVENT_SERVERSSL_HANDSHAKE">
					<xsd:annotation>
						<xsd:documentation>POLICY_EVENT_SERVERSSL_HANDSHAKE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_EVENT_HTTP_REQUEST">
					<xsd:annotation>
						<xsd:documentation>POLICY_EVENT_HTTP_REQUEST</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_EVENT_HTTP_RESPONSE">
					<xsd:annotation>
						<xsd:documentation>POLICY_EVENT_HTTP_RESPONSE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
			</xsd:restriction>
		</xsd:simpleType>
		<xsd:complexType name="Common.LongSequenceSequenceSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Common.LongSequenceSequence[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="LocalLB.ContentPolicy.PolicyControlsSequenceSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:LocalLB.ContentPolicy.PolicyControlsSequence[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:simpleType name="LocalLB.ContentPolicy.PolicyAction">
			<xsd:restriction base="xsd:string">
				<xsd:enumeration value="POLICY_ACTION_UNKNOWN">
					<xsd:annotation>
						<xsd:documentation>POLICY_ACTION_UNKNOWN</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_ACTION_INSERT">
					<xsd:annotation>
						<xsd:documentation>POLICY_ACTION_INSERT</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_ACTION_REPLACE">
					<xsd:annotation>
						<xsd:documentation>POLICY_ACTION_REPLACE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_ACTION_APPLY">
					<xsd:annotation>
						<xsd:documentation>POLICY_ACTION_APPLY</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_ACTION_ADD">
					<xsd:annotation>
						<xsd:documentation>POLICY_ACTION_ADD</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_ACTION_CLASSIFY">
					<xsd:annotation>
						<xsd:documentation>POLICY_ACTION_CLASSIFY</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_ACTION_REMOVE">
					<xsd:annotation>
						<xsd:documentation>POLICY_ACTION_REMOVE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_ACTION_SELECT">
					<xsd:annotation>
						<xsd:documentation>POLICY_ACTION_SELECT</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_ACTION_ENABLE">
					<xsd:annotation>
						<xsd:documentation>POLICY_ACTION_ENABLE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_ACTION_DISABLE">
					<xsd:annotation>
						<xsd:documentation>POLICY_ACTION_DISABLE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_ACTION_REDIRECT">
					<xsd:annotation>
						<xsd:documentation>POLICY_ACTION_REDIRECT</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_ACTION_WRITE">
					<xsd:annotation>
						<xsd:documentation>POLICY_ACTION_WRITE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_ACTION_RESET">
					<xsd:annotation>
						<xsd:documentation>POLICY_ACTION_RESET</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_ACTION_EVENT">
					<xsd:annotation>
						<xsd:documentation>POLICY_ACTION_EVENT</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_ACTION_SET_VARIABLE">
					<xsd:annotation>
						<xsd:documentation>POLICY_ACTION_SET_VARIABLE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_ACTION_RENEGOTIATE">
					<xsd:annotation>
						<xsd:documentation>POLICY_ACTION_RENEGOTIATE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_ACTION_PERSIST_SOURCE_ADDRESS">
					<xsd:annotation>
						<xsd:documentation>POLICY_ACTION_PERSIST_SOURCE_ADDRESS</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_ACTION_PERSIST_DESTINATION_ADDRESS">
					<xsd:annotation>
						<xsd:documentation>POLICY_ACTION_PERSIST_DESTINATION_ADDRESS</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_ACTION_PERSIST_COOKIE_INSERT">
					<xsd:annotation>
						<xsd:documentation>POLICY_ACTION_PERSIST_COOKIE_INSERT</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_ACTION_PERSIST_COOKIE_REWRITE">
					<xsd:annotation>
						<xsd:documentation>POLICY_ACTION_PERSIST_COOKIE_REWRITE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_ACTION_PERSIST_COOKIE_PASSIVE">
					<xsd:annotation>
						<xsd:documentation>POLICY_ACTION_PERSIST_COOKIE_PASSIVE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_ACTION_PERSIST_COOKIE_HASH">
					<xsd:annotation>
						<xsd:documentation>POLICY_ACTION_PERSIST_COOKIE_HASH</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_ACTION_PERSIST_UNIVERSAL">
					<xsd:annotation>
						<xsd:documentation>POLICY_ACTION_PERSIST_UNIVERSAL</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_ACTION_PERSIST_HASH">
					<xsd:annotation>
						<xsd:documentation>POLICY_ACTION_PERSIST_HASH</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="POLICY_ACTION_PERSIST_CARP">
					<xsd:annotation>
						<xsd:documentation>POLICY_ACTION_PERSIST_CARP</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
			</xsd:restriction>
		</xsd:simpleType>
		<xsd:complexType name="LocalLB.ContentPolicy.PolicyActionSequenceSequenceSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:LocalLB.ContentPolicy.PolicyActionSequenceSequence[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="LocalLB.ContentPolicy.PolicyActionSequenceSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:LocalLB.ContentPolicy.PolicyActionSequence[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="Common.StringSequenceSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Common.StringSequence[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="Common.LongSequenceSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Common.LongSequence[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="LocalLB.ContentPolicy.PolicyTargetSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:LocalLB.ContentPolicy.PolicyTarget[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="Common.LongSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:long[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="Common.StringSequenceSequenceSequenceSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Common.StringSequenceSequenceSequence[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="Common.EnabledStateSequenceSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Common.EnabledStateSequence[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="LocalLB.PolicySelectorSequenceSequenceSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:LocalLB.PolicySelectorSequenceSequence[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="LocalLB.PolicySelectorSequenceSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:LocalLB.PolicySelectorSequence[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="LocalLB.ContentPolicy.PolicyConditionSequenceSequenceSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:LocalLB.ContentPolicy.PolicyConditionSequenceSequence[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="LocalLB.ContentPolicy.PolicyTargetSequenceSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:LocalLB.ContentPolicy.PolicyTargetSequence[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="LocalLB.ContentPolicy.PolicyRequiresSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:LocalLB.ContentPolicy.PolicyRequires[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="LocalLB.PolicyEventSequenceSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:LocalLB.PolicyEventSequence[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="Common.EnabledStateSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Common.EnabledState[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:schema>
</types>

<!-- message -->

<message name="LocalLB.ContentPolicy.get_listRequest">
</message>
<message name="LocalLB.ContentPolicy.get_listResponse">
	<part name="return" type="tns:Common.StringSequence"/>
</message>

<message name="LocalLB.ContentPolicy.createRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="strategies" type="tns:Common.StringSequence"/>
</message>
<message name="LocalLB.ContentPolicy.createResponse">
</message>

<message name="LocalLB.ContentPolicy.delete_policyRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
</message>
<message name="LocalLB.ContentPolicy.delete_policyResponse">
</message>

<message name="LocalLB.ContentPolicy.delete_all_policiesRequest">
</message>
<message name="LocalLB.ContentPolicy.delete_all_policiesResponse">
</message>

<message name="LocalLB.ContentPolicy.get_policy_requiresRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_policy_requiresResponse">
	<part name="return" type="tns:LocalLB.ContentPolicy.PolicyRequiresSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.add_policy_requiresRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="requires" type="tns:LocalLB.ContentPolicy.PolicyRequiresSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.add_policy_requiresResponse">
</message>

<message name="LocalLB.ContentPolicy.remove_policy_requiresRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="requires" type="tns:LocalLB.ContentPolicy.PolicyRequiresSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.remove_policy_requiresResponse">
</message>

<message name="LocalLB.ContentPolicy.remove_all_policy_requiresRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
</message>
<message name="LocalLB.ContentPolicy.remove_all_policy_requiresResponse">
</message>

<message name="LocalLB.ContentPolicy.get_policy_controlsRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_policy_controlsResponse">
	<part name="return" type="tns:LocalLB.ContentPolicy.PolicyControlsSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.add_policy_controlsRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="controls" type="tns:LocalLB.ContentPolicy.PolicyControlsSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.add_policy_controlsResponse">
</message>

<message name="LocalLB.ContentPolicy.remove_policy_controlsRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="controls" type="tns:LocalLB.ContentPolicy.PolicyControlsSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.remove_policy_controlsResponse">
</message>

<message name="LocalLB.ContentPolicy.remove_all_policy_controlsRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
</message>
<message name="LocalLB.ContentPolicy.remove_all_policy_controlsResponse">
</message>

<message name="LocalLB.ContentPolicy.set_descriptionRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="descriptions" type="tns:Common.StringSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_descriptionResponse">
</message>

<message name="LocalLB.ContentPolicy.get_descriptionRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_descriptionResponse">
	<part name="return" type="tns:Common.StringSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_strategyRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="strategies" type="tns:Common.StringSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_strategyResponse">
</message>

<message name="LocalLB.ContentPolicy.get_strategyRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_strategyResponse">
	<part name="return" type="tns:Common.StringSequence"/>
</message>

<message name="LocalLB.ContentPolicy.get_policy_ruleRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_policy_ruleResponse">
	<part name="return" type="tns:Common.StringSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.add_policy_ruleRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.add_policy_ruleResponse">
</message>

<message name="LocalLB.ContentPolicy.remove_policy_ruleRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.remove_policy_ruleResponse">
</message>

<message name="LocalLB.ContentPolicy.remove_all_policy_rulesRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
</message>
<message name="LocalLB.ContentPolicy.remove_all_policy_rulesResponse">
</message>

<message name="LocalLB.ContentPolicy.set_rule_ordinalRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="ordinals" type="tns:Common.ULongSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_rule_ordinalResponse">
</message>

<message name="LocalLB.ContentPolicy.get_rule_ordinalRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_rule_ordinalResponse">
	<part name="return" type="tns:Common.ULongSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.get_rule_conditionRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_rule_conditionResponse">
	<part name="return" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.add_rule_conditionRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.add_rule_conditionResponse">
</message>

<message name="LocalLB.ContentPolicy.remove_rule_conditionRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.remove_rule_conditionResponse">
</message>

<message name="LocalLB.ContentPolicy.remove_all_rule_conditionsRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.remove_all_rule_conditionsResponse">
</message>

<message name="LocalLB.ContentPolicy.set_condition_operandRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="operands" type="tns:LocalLB.PolicyOperandSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_condition_operandResponse">
</message>

<message name="LocalLB.ContentPolicy.get_condition_operandRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_condition_operandResponse">
	<part name="return" type="tns:LocalLB.PolicyOperandSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_condition_eventRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="events" type="tns:LocalLB.PolicyEventSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_condition_eventResponse">
</message>

<message name="LocalLB.ContentPolicy.get_condition_eventRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_condition_eventResponse">
	<part name="return" type="tns:LocalLB.PolicyEventSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_condition_selectorRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="selectors" type="tns:LocalLB.PolicySelectorSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_condition_selectorResponse">
</message>

<message name="LocalLB.ContentPolicy.get_condition_selectorRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_condition_selectorResponse">
	<part name="return" type="tns:LocalLB.PolicySelectorSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_condition_typeRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="types" type="tns:LocalLB.ContentPolicy.PolicyConditionSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_condition_typeResponse">
</message>

<message name="LocalLB.ContentPolicy.get_condition_typeRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_condition_typeResponse">
	<part name="return" type="tns:LocalLB.ContentPolicy.PolicyConditionSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_condition_can_be_missing_stateRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="states" type="tns:Common.EnabledStateSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_condition_can_be_missing_stateResponse">
</message>

<message name="LocalLB.ContentPolicy.get_condition_can_be_missing_stateRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_condition_can_be_missing_stateResponse">
	<part name="return" type="tns:Common.EnabledStateSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_condition_case_sensitive_stateRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="states" type="tns:Common.EnabledStateSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_condition_case_sensitive_stateResponse">
</message>

<message name="LocalLB.ContentPolicy.get_condition_case_sensitive_stateRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_condition_case_sensitive_stateResponse">
	<part name="return" type="tns:Common.EnabledStateSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_condition_negate_stateRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="states" type="tns:Common.EnabledStateSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_condition_negate_stateResponse">
</message>

<message name="LocalLB.ContentPolicy.get_condition_negate_stateRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_condition_negate_stateResponse">
	<part name="return" type="tns:Common.EnabledStateSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_condition_indexRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="indices" type="tns:Common.LongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_condition_indexResponse">
</message>

<message name="LocalLB.ContentPolicy.get_condition_indexRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_condition_indexResponse">
	<part name="return" type="tns:Common.LongSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_condition_local_stateRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="states" type="tns:Common.EnabledStateSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_condition_local_stateResponse">
</message>

<message name="LocalLB.ContentPolicy.get_condition_local_stateRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_condition_local_stateResponse">
	<part name="return" type="tns:Common.EnabledStateSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_condition_internal_stateRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="states" type="tns:Common.EnabledStateSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_condition_internal_stateResponse">
</message>

<message name="LocalLB.ContentPolicy.get_condition_internal_stateRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_condition_internal_stateResponse">
	<part name="return" type="tns:Common.EnabledStateSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_condition_nameRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="names" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_condition_nameResponse">
</message>

<message name="LocalLB.ContentPolicy.get_condition_nameRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_condition_nameResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.get_condition_valueRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_condition_valueResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.add_condition_valueRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="values" type="tns:Common.StringSequenceSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.add_condition_valueResponse">
</message>

<message name="LocalLB.ContentPolicy.remove_condition_valueRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="values" type="tns:Common.StringSequenceSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.remove_condition_valueResponse">
</message>

<message name="LocalLB.ContentPolicy.remove_all_condition_valuesRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="condition_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.remove_all_condition_valuesResponse">
</message>

<message name="LocalLB.ContentPolicy.get_rule_actionRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_rule_actionResponse">
	<part name="return" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.add_rule_actionRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.add_rule_actionResponse">
</message>

<message name="LocalLB.ContentPolicy.remove_rule_actionRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.remove_rule_actionResponse">
</message>

<message name="LocalLB.ContentPolicy.remove_all_rule_actionsRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.remove_all_rule_actionsResponse">
</message>

<message name="LocalLB.ContentPolicy.set_action_eventRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="events" type="tns:LocalLB.PolicyEventSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_eventResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_eventRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_eventResponse">
	<part name="return" type="tns:LocalLB.PolicyEventSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_targetRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="targets" type="tns:LocalLB.ContentPolicy.PolicyTargetSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_targetResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_targetRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_targetResponse">
	<part name="return" type="tns:LocalLB.ContentPolicy.PolicyTargetSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_typeRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="actions" type="tns:LocalLB.ContentPolicy.PolicyActionSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_typeResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_typeRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_typeResponse">
	<part name="return" type="tns:LocalLB.ContentPolicy.PolicyActionSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_valueRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="values" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_valueResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_valueRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_valueResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_nameRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="names" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_nameResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_nameRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_nameResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_pathRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="paths" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_pathResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_pathRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_pathResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_keyRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="keys" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_keyResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_keyRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_keyResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_domainRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="domains" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_domainResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_domainRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_domainResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_netmaskRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="netmasks" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_netmaskResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_netmaskRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_netmaskResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_expiryRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="expiries" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_expiryResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_expiryRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_expiryResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_locationRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="locations" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_locationResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_locationRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_locationResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_query_stringRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="query_strings" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_query_stringResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_query_stringRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_query_stringResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_from_profileRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="from_profiles" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_from_profileResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_from_profileRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_from_profileResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_policyRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="action_policies" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_policyResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_policyRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_policyResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_expressionRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="expressions" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_expressionResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_expressionRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_expressionResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_poolRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="pools" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_poolResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_poolRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_poolResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_clone_poolRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="clone_pools" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_clone_poolResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_clone_poolRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_clone_poolResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_memberRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="members" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_memberResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_memberRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_memberResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_nodeRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="nodes" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_nodeResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_nodeRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_nodeResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_snat_automap_stateRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="states" type="tns:Common.EnabledStateSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_snat_automap_stateResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_snat_automap_stateRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_snat_automap_stateResponse">
	<part name="return" type="tns:Common.EnabledStateSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_snatpoolRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="snatpools" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_snatpoolResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_snatpoolRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_snatpoolResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_nexthopRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="nexthops" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_nexthopResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_nexthopRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_nexthopResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_rateclassRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="rateclasses" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_rateclassResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_rateclassRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_rateclassResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_vlanRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="vlans" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_vlanResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_vlanRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_vlanResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_virtual_serverRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="virtual_servers" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_virtual_serverResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_virtual_serverRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_virtual_serverResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_internal_virtual_serverRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="internal_virtual_servers" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_internal_virtual_serverResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_internal_virtual_serverRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_internal_virtual_serverResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_applicationRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="applications" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_applicationResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_applicationRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_applicationResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_categoryRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="categories" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_categoryResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_categoryRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_categoryResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_priorityRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="priorities" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_priorityResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_priorityRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_priorityResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_protocolRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="protocols" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_protocolResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_protocolRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_protocolResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_messageRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="messages" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_messageResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_messageRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_messageResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_facilityRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="facilities" type="tns:Common.StringSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_facilityResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_facilityRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_facilityResponse">
	<part name="return" type="tns:Common.StringSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_portRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="ports" type="tns:Common.LongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_portResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_portRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_portResponse">
	<part name="return" type="tns:Common.LongSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_offsetRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="offsets" type="tns:Common.LongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_offsetResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_offsetRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_offsetResponse">
	<part name="return" type="tns:Common.LongSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_statusRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="statuses" type="tns:Common.LongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_statusResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_statusRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_statusResponse">
	<part name="return" type="tns:Common.LongSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_timeoutRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="timeouts" type="tns:Common.LongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_timeoutResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_timeoutRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_timeoutResponse">
	<part name="return" type="tns:Common.LongSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_vlan_idRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="vlan_ids" type="tns:Common.LongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_vlan_idResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_vlan_idRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_vlan_idResponse">
	<part name="return" type="tns:Common.LongSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_pin_stateRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="states" type="tns:Common.EnabledStateSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_pin_stateResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_pin_stateRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_pin_stateResponse">
	<part name="return" type="tns:Common.EnabledStateSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_defer_stateRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="states" type="tns:Common.EnabledStateSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_defer_stateResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_defer_stateRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_defer_stateResponse">
	<part name="return" type="tns:Common.EnabledStateSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.set_action_ssl_session_id_stateRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
	<part name="states" type="tns:Common.EnabledStateSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.set_action_ssl_session_id_stateResponse">
</message>

<message name="LocalLB.ContentPolicy.get_action_ssl_session_id_stateRequest">
	<part name="policies" type="tns:Common.StringSequence"/>
	<part name="rules" type="tns:Common.StringSequenceSequence"/>
	<part name="action_ids" type="tns:Common.ULongSequenceSequenceSequence"/>
</message>
<message name="LocalLB.ContentPolicy.get_action_ssl_session_id_stateResponse">
	<part name="return" type="tns:Common.EnabledStateSequenceSequenceSequence"/>
</message>

<message name="LocalLB.ContentPolicy.get_versionRequest">
</message>
<message name="LocalLB.ContentPolicy.get_versionResponse">
	<part name="return" type="xsd:string"/>
</message>

<!-- portType -->

<portType name="LocalLB.ContentPolicyPortType">
	<operation name="get_list">
   	<documentation>
 Gets a list of all Content Policies.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_listRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_listResponse"/>
	</operation>
	<operation name="create">
	<documentation>
 Creates a new Content Policy with a Content Policy Strategy.
 See LocalLB::ContentPolicyStrategy for more details. The new Content
 Policy will have a Content Policy Requires of POLICY_REQUIRES_HTTP.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.createRequest"/>
		<output message="tns:LocalLB.ContentPolicy.createResponse"/>
	</operation>
	<operation name="delete_policy">
	<documentation>
 Deletes a list of policies.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.delete_policyRequest"/>
		<output message="tns:LocalLB.ContentPolicy.delete_policyResponse"/>
	</operation>
	<operation name="delete_all_policies">
	<documentation>
 Deletes all policies.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.delete_all_policiesRequest"/>
		<output message="tns:LocalLB.ContentPolicy.delete_all_policiesResponse"/>
	</operation>
	<operation name="get_policy_requires">
	<documentation>
 Gets a list of Content Policy Requires associated with the
 given Content Policies. A Content Policy Requires indicates the types
 of profiles that need to be associated with a virtual server before a
 Content Policy can be attached. This will also affect the types of
 Content Policy Rule Conditions that can be used in the Content
 Policy. Upon removing all Content Policy Requires, the Content
 Policy Requires will automatically set itself to include only
 POLICY_REQUIRES_HTTP.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_policy_requiresRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_policy_requiresResponse"/>
	</operation>
	<operation name="add_policy_requires">
	<documentation>
 Adds a set of Content Policy Requires to the specified Content
 Policies.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.add_policy_requiresRequest"/>
		<output message="tns:LocalLB.ContentPolicy.add_policy_requiresResponse"/>
	</operation>
	<operation name="remove_policy_requires">
	<documentation>
 Removes a set of Content Policy Requires from the specified Content
 Policies.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.remove_policy_requiresRequest"/>
		<output message="tns:LocalLB.ContentPolicy.remove_policy_requiresResponse"/>
	</operation>
	<operation name="remove_all_policy_requires">
	<documentation>
 Removes all Content Policy Requires from the specified Content
 Policies.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.remove_all_policy_requiresRequest"/>
		<output message="tns:LocalLB.ContentPolicy.remove_all_policy_requiresResponse"/>
	</operation>
	<operation name="get_policy_controls">
	<documentation>
 Gets a list of Content Policy Controls associated with the
 given Content Policies. A Content Policy Controls indicates the
 of virtual server behaviors that a Content Policy may modify.
 This will also affect the types of Content Policy Rule Actions that
 can be used in the Content Policy.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_policy_controlsRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_policy_controlsResponse"/>
	</operation>
	<operation name="add_policy_controls">
	<documentation>
 Adds to a list of Content Policy Controls associated with the
 given Content Policies.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.add_policy_controlsRequest"/>
		<output message="tns:LocalLB.ContentPolicy.add_policy_controlsResponse"/>
	</operation>
	<operation name="remove_policy_controls">
	<documentation>
 Removes from the list of Content Policy Controls associated with the
 given Content Policies.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.remove_policy_controlsRequest"/>
		<output message="tns:LocalLB.ContentPolicy.remove_policy_controlsResponse"/>
	</operation>
	<operation name="remove_all_policy_controls">
	<documentation>
 Removes all Content Policy Controls associated with the given Content
 Policies.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.remove_all_policy_controlsRequest"/>
		<output message="tns:LocalLB.ContentPolicy.remove_all_policy_controlsResponse"/>
	</operation>
	<operation name="set_description">
	<documentation>
 Sets the description for a set of Content Policies.

 This is an arbitrary field which can be used for any purpose.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_descriptionRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_descriptionResponse"/>
	</operation>
	<operation name="get_description">
	<documentation>
 Gets the description for a set of Content Policies.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_descriptionRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_descriptionResponse"/>
	</operation>
	<operation name="set_strategy">
	<documentation>
 Sets the Content Policy Strategy for a set of Content Policies. A
 Content Policy Strategy is a way to resolve conflicts when multiple
 Content Policy Rules have their Content Policy Conditions matched.
 See: LocalLB::ContentPolicyStrategy for more details.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_strategyRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_strategyResponse"/>
	</operation>
	<operation name="get_strategy">
	<documentation>
 Gets the Content Policy Strategy for a set of Content Policies.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_strategyRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_strategyResponse"/>
	</operation>
	<operation name="get_policy_rule">
	<documentation>
 Gets the Content Policy Rules for the specified Content Policies.
 Content Policy Rules are collections of Content Policy Conditions
 to match connections and Content Policy Actions to take actions when
 a Content Policy Condition is matched. These Content Policy Rules may
 have a specified ordinal to determine how to match rules when a
 Content Policy Strategy of type PolicyStrategy::STRATEGY_MATCH_FIRST
 is attached to the Content Policy.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_policy_ruleRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_policy_ruleResponse"/>
	</operation>
	<operation name="add_policy_rule">
	<documentation>
 Adds a set of Content Policy Rules to the specified Content Policies.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.add_policy_ruleRequest"/>
		<output message="tns:LocalLB.ContentPolicy.add_policy_ruleResponse"/>
	</operation>
	<operation name="remove_policy_rule">
	<documentation>
 Removes a set of Content Policy Rules from the specified Content
 Policies.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.remove_policy_ruleRequest"/>
		<output message="tns:LocalLB.ContentPolicy.remove_policy_ruleResponse"/>
	</operation>
	<operation name="remove_all_policy_rules">
	<documentation>
 Removes all Content Policy Rules from the specified Content Policies.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.remove_all_policy_rulesRequest"/>
		<output message="tns:LocalLB.ContentPolicy.remove_all_policy_rulesResponse"/>
	</operation>
	<operation name="set_rule_ordinal">
	<documentation>
 Sets the ordinal for the specified Content Policy Rules under the
 specified Content Policies. The ordinal determines the increasing
 order in which Content Policy Rules are applied if a Content Policy
 Strategy of type PolicyStrategy::STRATEGY_FIRST_MATCH is present.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_rule_ordinalRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_rule_ordinalResponse"/>
	</operation>
	<operation name="get_rule_ordinal">
	<documentation>
 Gets the ordinal for the specified Content Policy Rules under the
 specified Content Policies.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_rule_ordinalRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_rule_ordinalResponse"/>
	</operation>
	<operation name="get_rule_condition">
	<documentation>
 Gets the list of Content Policy Conditions for the specified Content
 Policy Rules for the specified Content Policy Conditions. The Content
 Policy Conditions specify a set of conditions that can be used to
 match a connection through a virtual server by a Content Policy. The
 value of the Content Policy Condition ID determines the order in
 which they are evaluated with the Content Policy Conditions with the
 smallest ID being tested first.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_rule_conditionRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_rule_conditionResponse"/>
	</operation>
	<operation name="add_rule_condition">
	<documentation>
 Adds to the list of Content Policy Conditions for the specified
 Content Policy Rules for the specified Content Policies.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.add_rule_conditionRequest"/>
		<output message="tns:LocalLB.ContentPolicy.add_rule_conditionResponse"/>
	</operation>
	<operation name="remove_rule_condition">
	<documentation>
 Removes from the list of Content Policy Conditions for the specified
 Content Policy Rules for the specified Content Policies.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.remove_rule_conditionRequest"/>
		<output message="tns:LocalLB.ContentPolicy.remove_rule_conditionResponse"/>
	</operation>
	<operation name="remove_all_rule_conditions">
	<documentation>
 Removes all Content Policy Conditions from the specified Content
 Policy Rules for the specified Content Policies.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.remove_all_rule_conditionsRequest"/>
		<output message="tns:LocalLB.ContentPolicy.remove_all_rule_conditionsResponse"/>
	</operation>
	<operation name="set_condition_operand">
	<documentation>
 Sets the Policy Operand for the set of Policy Conditions for the set
 of Content Policy Rules for the set of Content Policies. A Policy
 Operand specifies an attribute of a connection that a Content Policy
 Condition will match on (See: LocalLB::PolicyOperand for more
 details).

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_condition_operandRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_condition_operandResponse"/>
	</operation>
	<operation name="get_condition_operand">
	<documentation>
 Gets the Policy Operand for the set of Policy Conditions for the set
 of Content Policy Rules for the set of Content Policies.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_condition_operandRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_condition_operandResponse"/>
	</operation>
	<operation name="set_condition_event">
	<documentation>
 Sets the Policy Event for the specified Content Policy Conditions.
 The Policy Event is an event for a Content Policy Condition to look
 for under a given Policy Operand (See: LocalLB::PolicyEvent for more
 details).

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_condition_eventRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_condition_eventResponse"/>
	</operation>
	<operation name="get_condition_event">
	<documentation>
 Gets the Policy Event for the specified Content Policy Conditions.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_condition_eventRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_condition_eventResponse"/>
	</operation>
	<operation name="set_condition_selector">
	<documentation>
 Sets the Policy Selector for the specified Content Policy Conditions.
 The Policy Selector determines what value to match on as in a Policy
 Event for a given connection (See: LocalLB::PolicySelector for more
 details).

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_condition_selectorRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_condition_selectorResponse"/>
	</operation>
	<operation name="get_condition_selector">
	<documentation>
 Gets the Policy Selector for the specified Content Policy Conditions.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_condition_selectorRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_condition_selectorResponse"/>
	</operation>
	<operation name="set_condition_type">
	<documentation>
 Sets the Policy Condition Type for the specified Content Policy
 Conditions. A Policy Condition Type specifies how to compare a
 connection for a Content Policy Condition.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_condition_typeRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_condition_typeResponse"/>
	</operation>
	<operation name="get_condition_type">
	<documentation>
 Gets the Policy Condition Type for the specified Content Policy
 Conditions.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_condition_typeRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_condition_typeResponse"/>
	</operation>
	<operation name="set_condition_can_be_missing_state">
	<documentation>
 Sets whether a given Content Policy Condition can be missing when
 matching a connection.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_condition_can_be_missing_stateRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_condition_can_be_missing_stateResponse"/>
	</operation>
	<operation name="get_condition_can_be_missing_state">
	<documentation>
 Gets whether a given Content Policy Condition can be missing when
 matching a connection.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_condition_can_be_missing_stateRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_condition_can_be_missing_stateResponse"/>
	</operation>
	<operation name="set_condition_case_sensitive_state">
	<documentation>
 Sets whether or not case sensitivity matters when matching strings in
 a connection for a Content Policy Condition.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_condition_case_sensitive_stateRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_condition_case_sensitive_stateResponse"/>
	</operation>
	<operation name="get_condition_case_sensitive_state">
	<documentation>
 Gets whether or not case sensitivity matters when matching strings in
 a connection for a Content Policy Condition.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_condition_case_sensitive_stateRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_condition_case_sensitive_stateResponse"/>
	</operation>
	<operation name="set_condition_negate_state">
	<documentation>
 Sets whether or not to negate a Content Policy Condition. When a
 Content Policy Condition is negated, then a connection not matched
 under a Content Policy Condition would match and vice-versa.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_condition_negate_stateRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_condition_negate_stateResponse"/>
	</operation>
	<operation name="get_condition_negate_state">
	<documentation>
 Gets whether or not to negate a Content Policy Condition.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_condition_negate_stateRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_condition_negate_stateResponse"/>
	</operation>
	<operation name="set_condition_index">
	<documentation>
 Sets the index of an array to search in when matching a connection
 which provides a list of values. For example, during an
 EVENT_SERVERSSL_HANDSHAKE a list of suggested cipher suites is
 exchanged, the index in this case would refer to an index in the
 list of suggested cipher suites sent.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_condition_indexRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_condition_indexResponse"/>
	</operation>
	<operation name="get_condition_index">
	<documentation>
 Gets the index of an array to search in when matching a connection
 which has a list of values.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_condition_indexRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_condition_indexResponse"/>
	</operation>
	<operation name="set_condition_local_state">
	<documentation>
 Sets whether or not a Content Policy Condition matches locally.
 A connection between a client and the server across the system
 contains four endpoints. Two of which are the local endpoints.
 In other words, those endpoints indicate the system ends of the
 connection. Two of which are the non-local endpoints. In other words,
 those endpoints indicate the client or server ends of the connection.
 When a condition matches locally, it matches on the system-side of a
 connection. Whether a connection is matched on the client-side or
 server-side is determined by the internal state.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_condition_local_stateRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_condition_local_stateResponse"/>
	</operation>
	<operation name="get_condition_local_state">
	<documentation>
 Gets whether or not a Content Policy Condition matches locally.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_condition_local_stateRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_condition_local_stateResponse"/>
	</operation>
	<operation name="set_condition_internal_state">
	<documentation>
 Sets whether or not a Content Policy Condition matches internally.
 A connection between a client and the server across the system
 contains four endpoints. Two of which are the client-side or external
 endpoints. In other words, one endpoint indicates the client end of
 the connection and one endpoint indicates the system end. The other
 two are the server-side or internal endpoints. In other words, one
 endpoint indicates the system end and the other indicates the server
 end. When a condition matches internally, it matches on the
 server-side of a connection. Whether a connection is matched on the
 system side or the client or server side is determined by the local
 state.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_condition_internal_stateRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_condition_internal_stateResponse"/>
	</operation>
	<operation name="get_condition_internal_state">
	<documentation>
 Gets whether or not a Content Policy Condition matches internally.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_condition_internal_stateRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_condition_internal_stateResponse"/>
	</operation>
	<operation name="set_condition_name">
	<documentation>
 Sets the name that a Policy Condition Selector can use to match names
 on a connection.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_condition_nameRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_condition_nameResponse"/>
	</operation>
	<operation name="get_condition_name">
	<documentation>
 Gets the name that a Policy Condition Selector can use to match names
 on a connection.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_condition_nameRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_condition_nameResponse"/>
	</operation>
	<operation name="get_condition_value">
	<documentation>
 Gets the list of strings that a Content Policy Condition can match
 on.

 Note: All values passed into conditions will be translated to the
 appropriate type for the condition. For example, when a port is
 selected upon under a TCP operand, the values matched upon will be
 added using this function and the arguments will be string
 representations of integer values. Similarly, when an IP address is
 selected upon then the IP address will be passed in as a string
 formatted to look like an IP address.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_condition_valueRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_condition_valueResponse"/>
	</operation>
	<operation name="add_condition_value">
	<documentation>
 Adds to the list of strings that a Content Policy Condition can match
 on.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.add_condition_valueRequest"/>
		<output message="tns:LocalLB.ContentPolicy.add_condition_valueResponse"/>
	</operation>
	<operation name="remove_condition_value">
	<documentation>
 Removes from the list of strings that a Content Policy Condition can
 match on.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.remove_condition_valueRequest"/>
		<output message="tns:LocalLB.ContentPolicy.remove_condition_valueResponse"/>
	</operation>
	<operation name="remove_all_condition_values">
	<documentation>
 Removes all strings that a Content Policy Condition can match on.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.remove_all_condition_valuesRequest"/>
		<output message="tns:LocalLB.ContentPolicy.remove_all_condition_valuesResponse"/>
	</operation>
	<operation name="get_rule_action">
	<documentation>
 Gets the list of Content Policy Actions associated with the Content
 Policy Rules of a given Content Policy. A Content Policy Action
 describes how to change a connection when all of the Content Policy
 Conditions of a Content Policy Rule are matched. The value of the
 Content Policy Action ID determines the order in which they are
 executed.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_rule_actionRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_rule_actionResponse"/>
	</operation>
	<operation name="add_rule_action">
	<documentation>
 Adds to the list of Content Policy Actions associated with the
 Content Policy Rules of a given Content Policy. The value of the
 Content Policy Action ID determines the order in which they are
 executed.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.add_rule_actionRequest"/>
		<output message="tns:LocalLB.ContentPolicy.add_rule_actionResponse"/>
	</operation>
	<operation name="remove_rule_action">
	<documentation>
 Removes from the list of Content Policy Actions associated with the
 Content Policy Rules of a given Content Policy.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.remove_rule_actionRequest"/>
		<output message="tns:LocalLB.ContentPolicy.remove_rule_actionResponse"/>
	</operation>
	<operation name="remove_all_rule_actions">
	<documentation>
 Removes all Content Policy Actions from the given Content Policy
 Rules.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.remove_all_rule_actionsRequest"/>
		<output message="tns:LocalLB.ContentPolicy.remove_all_rule_actionsResponse"/>
	</operation>
	<operation name="set_action_event">
	<documentation>
 Sets the connection event that a Content Policy Action will act upon
 (See: LocalLB::PolicyEvent for more details).

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_eventRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_eventResponse"/>
	</operation>
	<operation name="get_action_event">
	<documentation>
 Gets the connection event that a Content Policy Action will act upon.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_eventRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_eventResponse"/>
	</operation>
	<operation name="set_action_target">
	<documentation>
 Sets the Content Policy Action Target that will specify what in a
 matched connection will be modified.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_targetRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_targetResponse"/>
	</operation>
	<operation name="get_action_target">
	<documentation>
 Gets the Content Policy Action Target that will specify what in a
 matched connection will be modified.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_targetRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_targetResponse"/>
	</operation>
	<operation name="set_action_type">
	<documentation>
 Sets the Content Policy Action Type for the specifed Content Policy
 Actions. This determines the type of action that will be taken on a
 connection that matches the rules Content Policy Conditions.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_typeRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_typeResponse"/>
	</operation>
	<operation name="get_action_type">
	<documentation>
 Gets the Content Policy Action Type for the specifed Content Policy
 Actions.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_typeRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_typeResponse"/>
	</operation>
	<operation name="set_action_value">
	<documentation>
 Sets a string value. This string value is typically used with
 POLICY_ACTION_INSERT or POLICY_ACTION_REPLACE to insert or replace a
 value for the given PolicyTarget. As a Tcl-enabled field, strings
 which start with "tcl:" are treated as Tcl expressions and get
 expanded at runtime.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_valueRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_valueResponse"/>
	</operation>
	<operation name="get_action_value">
	<documentation>
 Gets a string value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_valueRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_valueResponse"/>
	</operation>
	<operation name="set_action_name">
	<documentation>
 Sets a name value. Name values are typically associated with
 attributes of a target that are name-value pairs. For example, with
 a PolicyTarget of POLICY_TARGET_PERSIST, the name can be set for
 a cookie hash with a PolicyAction of
 POLICY_ACTION_PERSIST_COOKIE_HASH.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_nameRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_nameResponse"/>
	</operation>
	<operation name="get_action_name">
	<documentation>
 Gets a name value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_nameRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_nameResponse"/>
	</operation>
	<operation name="set_action_path">
	<documentation>
 Sets a URI path value. As a Tcl-enabled field, strings which
 start with "tcl:" are treated as Tcl expressions and get expanded at
 runtime.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_pathRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_pathResponse"/>
	</operation>
	<operation name="get_action_path">
	<documentation>
 Gets a URI path value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_pathRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_pathResponse"/>
	</operation>
	<operation name="set_action_key">
	<documentation>
 Sets a key value. As a Tcl-enabled field, strings which starts with
 "tcl:" are treated as Tcl expressions and get expanded at runtime.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_keyRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_keyResponse"/>
	</operation>
	<operation name="get_action_key">
	<documentation>
 Gets a key value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_keyRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_keyResponse"/>
	</operation>
	<operation name="set_action_domain">
	<documentation>
 Sets a domain value. As a Tcl-enabled field, strings which start with
 "tcl:" are treated as Tcl expressions and get expanded at runtime.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_domainRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_domainResponse"/>
	</operation>
	<operation name="get_action_domain">
	<documentation>
 Gets a domain value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_domainRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_domainResponse"/>
	</operation>
	<operation name="set_action_netmask">
	<documentation>
 Sets a netmask value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_netmaskRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_netmaskResponse"/>
	</operation>
	<operation name="get_action_netmask">
	<documentation>
 Gets a netmask value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_netmaskRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_netmaskResponse"/>
	</operation>
	<operation name="set_action_expiry">
	<documentation>
 Sets the expiry for a connection in conjunction with a PolicyAction
 of POLICY_ACTION_PERSIST_COOKIE_INSERT or
 POLICY_ACTION_COOKIE_REWRITE. The expiry determines how long a
 persistence cookie is valid for a connection. The format of arguments
 can take two forms:
 &amp;lt;NN&amp;gt; - For an expiry of NN seconds.
 [&amp;lt;NN&amp;gt;d][&amp;lt;HH&amp;gt;:&amp;lt;MM&amp;gt;:&amp;lt;SS&amp;gt;] - For an expiry of NN days, HH hours, MM
                           minutes, SS seconds. For example, an expiry
                           of 9d09:09:09 would set a cookie expiration
                           9 days, 9 hours, 9 minutes, and 9 seconds,
                           into the future.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_expiryRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_expiryResponse"/>
	</operation>
	<operation name="get_action_expiry">
	<documentation>
 Gets the expiry value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_expiryRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_expiryResponse"/>
	</operation>
	<operation name="set_action_location">
	<documentation>
 Sets a URL location value. As a Tcl-enabled field, strings which start with
 "tcl:" are treated as Tcl expressions and get expanded at runtime.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_locationRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_locationResponse"/>
	</operation>
	<operation name="get_action_location">
	<documentation>
 Gets a URL location value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_locationRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_locationResponse"/>
	</operation>
	<operation name="set_action_query_string">
	<documentation>
 Sets a query string value. As a Tcl-enabled field, strings which start with
 "tcl:" are treated as Tcl expressions and get expanded at runtime.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_query_stringRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_query_stringResponse"/>
	</operation>
	<operation name="get_action_query_string">
	<documentation>
 Gets query string value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_query_stringRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_query_stringResponse"/>
	</operation>
	<operation name="set_action_from_profile">
	<documentation>
 Sets a from profile value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_from_profileRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_from_profileResponse"/>
	</operation>
	<operation name="get_action_from_profile">
	<documentation>
 Gets a from profile value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_from_profileRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_from_profileResponse"/>
	</operation>
	<operation name="set_action_policy">
	<documentation>
 Sets a policy to invoke.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_policyRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_policyResponse"/>
	</operation>
	<operation name="get_action_policy">
	<documentation>
 Gets a policy to invoke.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_policyRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_policyResponse"/>
	</operation>
	<operation name="set_action_expression">
	<documentation>
 Sets a Tcl expression value. This is a Tcl-enabled field which is
 always treated as a Tcl expression.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_expressionRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_expressionResponse"/>
	</operation>
	<operation name="get_action_expression">
	<documentation>
 Gets a Tcl expression value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_expressionRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_expressionResponse"/>
	</operation>
	<operation name="set_action_pool">
	<documentation>
 Sets a pool value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_poolRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_poolResponse"/>
	</operation>
	<operation name="get_action_pool">
	<documentation>
 Gets a pool value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_poolRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_poolResponse"/>
	</operation>
	<operation name="set_action_clone_pool">
	<documentation>
 Sets a clone pool value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_clone_poolRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_clone_poolResponse"/>
	</operation>
	<operation name="get_action_clone_pool">
	<documentation>
 Gets a clone pool value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_clone_poolRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_clone_poolResponse"/>
	</operation>
	<operation name="set_action_member">
	<documentation>
 Sets a member value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_memberRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_memberResponse"/>
	</operation>
	<operation name="get_action_member">
	<documentation>
 Gets a member value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_memberRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_memberResponse"/>
	</operation>
	<operation name="set_action_node">
	<documentation>
 Sets a node value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_nodeRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_nodeResponse"/>
	</operation>
	<operation name="get_action_node">
	<documentation>
 Gets a node value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_nodeRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_nodeResponse"/>
	</operation>
	<operation name="set_action_snat_automap_state">
	<documentation>
 Sets whether or not to use SNAT automap for a connection.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_snat_automap_stateRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_snat_automap_stateResponse"/>
	</operation>
	<operation name="get_action_snat_automap_state">
	<documentation>
 Gets whether or not to use SNAT automap for a connection.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_snat_automap_stateRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_snat_automap_stateResponse"/>
	</operation>
	<operation name="set_action_snatpool">
	<documentation>
 Sets the SNAT Pool for a connection.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_snatpoolRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_snatpoolResponse"/>
	</operation>
	<operation name="get_action_snatpool">
	<documentation>
 Gets the SNAT Pool for a connection.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_snatpoolRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_snatpoolResponse"/>
	</operation>
	<operation name="set_action_nexthop">
	<documentation>
 Sets a nexthop value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_nexthopRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_nexthopResponse"/>
	</operation>
	<operation name="get_action_nexthop">
	<documentation>
 Gets a nexthop value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_nexthopRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_nexthopResponse"/>
	</operation>
	<operation name="set_action_rateclass">
	<documentation>
 Sets a rateclass value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_rateclassRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_rateclassResponse"/>
	</operation>
	<operation name="get_action_rateclass">
	<documentation>
 Gets a rateclass value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_rateclassRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_rateclassResponse"/>
	</operation>
	<operation name="set_action_vlan">
	<documentation>
 Sets a VLAN value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_vlanRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_vlanResponse"/>
	</operation>
	<operation name="get_action_vlan">
	<documentation>
 Gets a VLAN value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_vlanRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_vlanResponse"/>
	</operation>
	<operation name="set_action_virtual_server">
	<documentation>
 Sets a virtual server.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_virtual_serverRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_virtual_serverResponse"/>
	</operation>
	<operation name="get_action_virtual_server">
	<documentation>
 Gets a virtual server.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_virtual_serverRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_virtual_serverResponse"/>
	</operation>
	<operation name="set_action_internal_virtual_server">
	<documentation>
 Sets an internal virtual server.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_internal_virtual_serverRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_internal_virtual_serverResponse"/>
	</operation>
	<operation name="get_action_internal_virtual_server">
	<documentation>
 Gets an internal virtual server.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_internal_virtual_serverRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_internal_virtual_serverResponse"/>
	</operation>
	<operation name="set_action_application">
	<documentation>
 Sets an application.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_applicationRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_applicationResponse"/>
	</operation>
	<operation name="get_action_application">
	<documentation>
 Gets an application.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_applicationRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_applicationResponse"/>
	</operation>
	<operation name="set_action_category">
	<documentation>
 Sets a category.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_categoryRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_categoryResponse"/>
	</operation>
	<operation name="get_action_category">
	<documentation>
 Gets a category.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_categoryRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_categoryResponse"/>
	</operation>
	<operation name="set_action_priority">
	<documentation>
 Sets a priority value. Priorities correspond to Syslog priorities and
 may only be "debug", "info", "notice", "warning", "err", "crit",
 "alert", or "emerg".

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_priorityRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_priorityResponse"/>
	</operation>
	<operation name="get_action_priority">
	<documentation>
 Gets a priority value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_priorityRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_priorityResponse"/>
	</operation>
	<operation name="set_action_protocol">
	<documentation>
 Sets a protocol value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_protocolRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_protocolResponse"/>
	</operation>
	<operation name="get_action_protocol">
	<documentation>
 Gets a protocol value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_protocolRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_protocolResponse"/>
	</operation>
	<operation name="set_action_message">
	<documentation>
 Sets a message value.  As a Tcl-enabled field, strings which start with
 "tcl:" are treated as Tcl expressions and get expanded at runtime.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_messageRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_messageResponse"/>
	</operation>
	<operation name="get_action_message">
	<documentation>
 Gets the message for a connection when it triggers a Content Policy
 Action.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_messageRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_messageResponse"/>
	</operation>
	<operation name="set_action_facility">
	<documentation>
 Sets a Syslog facility. The facilities may be "user", "local0",
 "local1", "local2", "local3", "local4", "local5", "local6",
 "local7", "syslog", "security", "authpriv", "daemon", "kern", "cron",
 "ftp", "lpr", "mail", "news", or "uucp".

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_facilityRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_facilityResponse"/>
	</operation>
	<operation name="get_action_facility">
	<documentation>
 Gets a Syslog facility.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_facilityRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_facilityResponse"/>
	</operation>
	<operation name="set_action_port">
	<documentation>
 Sets a port value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_portRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_portResponse"/>
	</operation>
	<operation name="get_action_port">
	<documentation>
 Gets a port value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_portRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_portResponse"/>
	</operation>
	<operation name="set_action_offset">
	<documentation>
 Sets an offset value for a connection's cookie hash persistence.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_offsetRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_offsetResponse"/>
	</operation>
	<operation name="get_action_offset">
	<documentation>
 Gets an offset value for a connection's cookie hash persistence.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_offsetRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_offsetResponse"/>
	</operation>
	<operation name="set_action_status">
	<documentation>
 Sets a status value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_statusRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_statusResponse"/>
	</operation>
	<operation name="get_action_status">
	<documentation>
 Gets a status value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_statusRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_statusResponse"/>
	</operation>
	<operation name="set_action_timeout">
	<documentation>
 Sets a timeout value in seconds. The timeout must be a non-negative
 number.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_timeoutRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_timeoutResponse"/>
	</operation>
	<operation name="get_action_timeout">
	<documentation>
 Gets a timeout value in seconds.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_timeoutRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_timeoutResponse"/>
	</operation>
	<operation name="set_action_vlan_id">
	<documentation>
 Sets a VLAN ID value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_vlan_idRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_vlan_idResponse"/>
	</operation>
	<operation name="get_action_vlan_id">
	<documentation>
 Gets a VLAN ID value.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_vlan_idRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_vlan_idResponse"/>
	</operation>
	<operation name="set_action_pin_state">
	<documentation>
 Sets the the state to pin cached content in memory.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_pin_stateRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_pin_stateResponse"/>
	</operation>
	<operation name="get_action_pin_state">
	<documentation>
 Gets the the state to pin cached content in memory.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_pin_stateRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_pin_stateResponse"/>
	</operation>
	<operation name="set_action_defer_state">
	<documentation>
 Sets whether to defer a PolicyAction. For example, when defer is set
 to true with POLICY_ACTION_CLASSIFY, the classification of a
 connection is deferred.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_defer_stateRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_defer_stateResponse"/>
	</operation>
	<operation name="get_action_defer_state">
	<documentation>
 Gets whether to defer a PolicyAction.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_defer_stateRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_defer_stateResponse"/>
	</operation>
	<operation name="set_action_ssl_session_id_state">
	<documentation>
 Sets whether to set an SSL session ID.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.set_action_ssl_session_id_stateRequest"/>
		<output message="tns:LocalLB.ContentPolicy.set_action_ssl_session_id_stateResponse"/>
	</operation>
	<operation name="get_action_ssl_session_id_state">
	<documentation>
 Gets whether to set an SSL session ID.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_action_ssl_session_id_stateRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_action_ssl_session_id_stateResponse"/>
	</operation>
	<operation name="get_version">
	<documentation>
 Gets the version information for this interface.

        	</documentation>
		<input message="tns:LocalLB.ContentPolicy.get_versionRequest"/>
		<output message="tns:LocalLB.ContentPolicy.get_versionResponse"/>
	</operation>
</portType>

<!-- binding -->

<binding name="LocalLB.ContentPolicyBinding" type="tns:LocalLB.ContentPolicyPortType">
	<soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
	<operation name="get_list">
	<documentation>
 Gets a list of all Content Policies.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="create">
	<documentation>
 Creates a new Content Policy with a Content Policy Strategy.
 See LocalLB::ContentPolicyStrategy for more details. The new Content
 Policy will have a Content Policy Requires of POLICY_REQUIRES_HTTP.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="delete_policy">
	<documentation>
 Deletes a list of policies.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="delete_all_policies">
	<documentation>
 Deletes all policies.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_policy_requires">
	<documentation>
 Gets a list of Content Policy Requires associated with the
 given Content Policies. A Content Policy Requires indicates the types
 of profiles that need to be associated with a virtual server before a
 Content Policy can be attached. This will also affect the types of
 Content Policy Rule Conditions that can be used in the Content
 Policy. Upon removing all Content Policy Requires, the Content
 Policy Requires will automatically set itself to include only
 POLICY_REQUIRES_HTTP.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="add_policy_requires">
	<documentation>
 Adds a set of Content Policy Requires to the specified Content
 Policies.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="remove_policy_requires">
	<documentation>
 Removes a set of Content Policy Requires from the specified Content
 Policies.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="remove_all_policy_requires">
	<documentation>
 Removes all Content Policy Requires from the specified Content
 Policies.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_policy_controls">
	<documentation>
 Gets a list of Content Policy Controls associated with the
 given Content Policies. A Content Policy Controls indicates the
 of virtual server behaviors that a Content Policy may modify.
 This will also affect the types of Content Policy Rule Actions that
 can be used in the Content Policy.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="add_policy_controls">
	<documentation>
 Adds to a list of Content Policy Controls associated with the
 given Content Policies.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="remove_policy_controls">
	<documentation>
 Removes from the list of Content Policy Controls associated with the
 given Content Policies.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="remove_all_policy_controls">
	<documentation>
 Removes all Content Policy Controls associated with the given Content
 Policies.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_description">
	<documentation>
 Sets the description for a set of Content Policies.

 This is an arbitrary field which can be used for any purpose.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_description">
	<documentation>
 Gets the description for a set of Content Policies.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_strategy">
	<documentation>
 Sets the Content Policy Strategy for a set of Content Policies. A
 Content Policy Strategy is a way to resolve conflicts when multiple
 Content Policy Rules have their Content Policy Conditions matched.
 See: LocalLB::ContentPolicyStrategy for more details.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_strategy">
	<documentation>
 Gets the Content Policy Strategy for a set of Content Policies.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_policy_rule">
	<documentation>
 Gets the Content Policy Rules for the specified Content Policies.
 Content Policy Rules are collections of Content Policy Conditions
 to match connections and Content Policy Actions to take actions when
 a Content Policy Condition is matched. These Content Policy Rules may
 have a specified ordinal to determine how to match rules when a
 Content Policy Strategy of type PolicyStrategy::STRATEGY_MATCH_FIRST
 is attached to the Content Policy.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="add_policy_rule">
	<documentation>
 Adds a set of Content Policy Rules to the specified Content Policies.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="remove_policy_rule">
	<documentation>
 Removes a set of Content Policy Rules from the specified Content
 Policies.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="remove_all_policy_rules">
	<documentation>
 Removes all Content Policy Rules from the specified Content Policies.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_rule_ordinal">
	<documentation>
 Sets the ordinal for the specified Content Policy Rules under the
 specified Content Policies. The ordinal determines the increasing
 order in which Content Policy Rules are applied if a Content Policy
 Strategy of type PolicyStrategy::STRATEGY_FIRST_MATCH is present.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_rule_ordinal">
	<documentation>
 Gets the ordinal for the specified Content Policy Rules under the
 specified Content Policies.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_rule_condition">
	<documentation>
 Gets the list of Content Policy Conditions for the specified Content
 Policy Rules for the specified Content Policy Conditions. The Content
 Policy Conditions specify a set of conditions that can be used to
 match a connection through a virtual server by a Content Policy. The
 value of the Content Policy Condition ID determines the order in
 which they are evaluated with the Content Policy Conditions with the
 smallest ID being tested first.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="add_rule_condition">
	<documentation>
 Adds to the list of Content Policy Conditions for the specified
 Content Policy Rules for the specified Content Policies.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="remove_rule_condition">
	<documentation>
 Removes from the list of Content Policy Conditions for the specified
 Content Policy Rules for the specified Content Policies.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="remove_all_rule_conditions">
	<documentation>
 Removes all Content Policy Conditions from the specified Content
 Policy Rules for the specified Content Policies.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_condition_operand">
	<documentation>
 Sets the Policy Operand for the set of Policy Conditions for the set
 of Content Policy Rules for the set of Content Policies. A Policy
 Operand specifies an attribute of a connection that a Content Policy
 Condition will match on (See: LocalLB::PolicyOperand for more
 details).

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_condition_operand">
	<documentation>
 Gets the Policy Operand for the set of Policy Conditions for the set
 of Content Policy Rules for the set of Content Policies.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_condition_event">
	<documentation>
 Sets the Policy Event for the specified Content Policy Conditions.
 The Policy Event is an event for a Content Policy Condition to look
 for under a given Policy Operand (See: LocalLB::PolicyEvent for more
 details).

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_condition_event">
	<documentation>
 Gets the Policy Event for the specified Content Policy Conditions.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_condition_selector">
	<documentation>
 Sets the Policy Selector for the specified Content Policy Conditions.
 The Policy Selector determines what value to match on as in a Policy
 Event for a given connection (See: LocalLB::PolicySelector for more
 details).

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_condition_selector">
	<documentation>
 Gets the Policy Selector for the specified Content Policy Conditions.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_condition_type">
	<documentation>
 Sets the Policy Condition Type for the specified Content Policy
 Conditions. A Policy Condition Type specifies how to compare a
 connection for a Content Policy Condition.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_condition_type">
	<documentation>
 Gets the Policy Condition Type for the specified Content Policy
 Conditions.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_condition_can_be_missing_state">
	<documentation>
 Sets whether a given Content Policy Condition can be missing when
 matching a connection.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_condition_can_be_missing_state">
	<documentation>
 Gets whether a given Content Policy Condition can be missing when
 matching a connection.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_condition_case_sensitive_state">
	<documentation>
 Sets whether or not case sensitivity matters when matching strings in
 a connection for a Content Policy Condition.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_condition_case_sensitive_state">
	<documentation>
 Gets whether or not case sensitivity matters when matching strings in
 a connection for a Content Policy Condition.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_condition_negate_state">
	<documentation>
 Sets whether or not to negate a Content Policy Condition. When a
 Content Policy Condition is negated, then a connection not matched
 under a Content Policy Condition would match and vice-versa.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_condition_negate_state">
	<documentation>
 Gets whether or not to negate a Content Policy Condition.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_condition_index">
	<documentation>
 Sets the index of an array to search in when matching a connection
 which provides a list of values. For example, during an
 EVENT_SERVERSSL_HANDSHAKE a list of suggested cipher suites is
 exchanged, the index in this case would refer to an index in the
 list of suggested cipher suites sent.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_condition_index">
	<documentation>
 Gets the index of an array to search in when matching a connection
 which has a list of values.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_condition_local_state">
	<documentation>
 Sets whether or not a Content Policy Condition matches locally.
 A connection between a client and the server across the system
 contains four endpoints. Two of which are the local endpoints.
 In other words, those endpoints indicate the system ends of the
 connection. Two of which are the non-local endpoints. In other words,
 those endpoints indicate the client or server ends of the connection.
 When a condition matches locally, it matches on the system-side of a
 connection. Whether a connection is matched on the client-side or
 server-side is determined by the internal state.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_condition_local_state">
	<documentation>
 Gets whether or not a Content Policy Condition matches locally.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_condition_internal_state">
	<documentation>
 Sets whether or not a Content Policy Condition matches internally.
 A connection between a client and the server across the system
 contains four endpoints. Two of which are the client-side or external
 endpoints. In other words, one endpoint indicates the client end of
 the connection and one endpoint indicates the system end. The other
 two are the server-side or internal endpoints. In other words, one
 endpoint indicates the system end and the other indicates the server
 end. When a condition matches internally, it matches on the
 server-side of a connection. Whether a connection is matched on the
 system side or the client or server side is determined by the local
 state.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_condition_internal_state">
	<documentation>
 Gets whether or not a Content Policy Condition matches internally.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_condition_name">
	<documentation>
 Sets the name that a Policy Condition Selector can use to match names
 on a connection.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_condition_name">
	<documentation>
 Gets the name that a Policy Condition Selector can use to match names
 on a connection.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_condition_value">
	<documentation>
 Gets the list of strings that a Content Policy Condition can match
 on.

 Note: All values passed into conditions will be translated to the
 appropriate type for the condition. For example, when a port is
 selected upon under a TCP operand, the values matched upon will be
 added using this function and the arguments will be string
 representations of integer values. Similarly, when an IP address is
 selected upon then the IP address will be passed in as a string
 formatted to look like an IP address.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="add_condition_value">
	<documentation>
 Adds to the list of strings that a Content Policy Condition can match
 on.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="remove_condition_value">
	<documentation>
 Removes from the list of strings that a Content Policy Condition can
 match on.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="remove_all_condition_values">
	<documentation>
 Removes all strings that a Content Policy Condition can match on.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_rule_action">
	<documentation>
 Gets the list of Content Policy Actions associated with the Content
 Policy Rules of a given Content Policy. A Content Policy Action
 describes how to change a connection when all of the Content Policy
 Conditions of a Content Policy Rule are matched. The value of the
 Content Policy Action ID determines the order in which they are
 executed.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="add_rule_action">
	<documentation>
 Adds to the list of Content Policy Actions associated with the
 Content Policy Rules of a given Content Policy. The value of the
 Content Policy Action ID determines the order in which they are
 executed.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="remove_rule_action">
	<documentation>
 Removes from the list of Content Policy Actions associated with the
 Content Policy Rules of a given Content Policy.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="remove_all_rule_actions">
	<documentation>
 Removes all Content Policy Actions from the given Content Policy
 Rules.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_event">
	<documentation>
 Sets the connection event that a Content Policy Action will act upon
 (See: LocalLB::PolicyEvent for more details).

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_event">
	<documentation>
 Gets the connection event that a Content Policy Action will act upon.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_target">
	<documentation>
 Sets the Content Policy Action Target that will specify what in a
 matched connection will be modified.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_target">
	<documentation>
 Gets the Content Policy Action Target that will specify what in a
 matched connection will be modified.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_type">
	<documentation>
 Sets the Content Policy Action Type for the specifed Content Policy
 Actions. This determines the type of action that will be taken on a
 connection that matches the rules Content Policy Conditions.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_type">
	<documentation>
 Gets the Content Policy Action Type for the specifed Content Policy
 Actions.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_value">
	<documentation>
 Sets a string value. This string value is typically used with
 POLICY_ACTION_INSERT or POLICY_ACTION_REPLACE to insert or replace a
 value for the given PolicyTarget. As a Tcl-enabled field, strings
 which start with "tcl:" are treated as Tcl expressions and get
 expanded at runtime.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_value">
	<documentation>
 Gets a string value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_name">
	<documentation>
 Sets a name value. Name values are typically associated with
 attributes of a target that are name-value pairs. For example, with
 a PolicyTarget of POLICY_TARGET_PERSIST, the name can be set for
 a cookie hash with a PolicyAction of
 POLICY_ACTION_PERSIST_COOKIE_HASH.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_name">
	<documentation>
 Gets a name value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_path">
	<documentation>
 Sets a URI path value. As a Tcl-enabled field, strings which
 start with "tcl:" are treated as Tcl expressions and get expanded at
 runtime.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_path">
	<documentation>
 Gets a URI path value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_key">
	<documentation>
 Sets a key value. As a Tcl-enabled field, strings which starts with
 "tcl:" are treated as Tcl expressions and get expanded at runtime.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_key">
	<documentation>
 Gets a key value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_domain">
	<documentation>
 Sets a domain value. As a Tcl-enabled field, strings which start with
 "tcl:" are treated as Tcl expressions and get expanded at runtime.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_domain">
	<documentation>
 Gets a domain value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_netmask">
	<documentation>
 Sets a netmask value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_netmask">
	<documentation>
 Gets a netmask value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_expiry">
	<documentation>
 Sets the expiry for a connection in conjunction with a PolicyAction
 of POLICY_ACTION_PERSIST_COOKIE_INSERT or
 POLICY_ACTION_COOKIE_REWRITE. The expiry determines how long a
 persistence cookie is valid for a connection. The format of arguments
 can take two forms:
 &amp;lt;NN&amp;gt; - For an expiry of NN seconds.
 [&amp;lt;NN&amp;gt;d][&amp;lt;HH&amp;gt;:&amp;lt;MM&amp;gt;:&amp;lt;SS&amp;gt;] - For an expiry of NN days, HH hours, MM
                           minutes, SS seconds. For example, an expiry
                           of 9d09:09:09 would set a cookie expiration
                           9 days, 9 hours, 9 minutes, and 9 seconds,
                           into the future.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_expiry">
	<documentation>
 Gets the expiry value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_location">
	<documentation>
 Sets a URL location value. As a Tcl-enabled field, strings which start with
 "tcl:" are treated as Tcl expressions and get expanded at runtime.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_location">
	<documentation>
 Gets a URL location value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_query_string">
	<documentation>
 Sets a query string value. As a Tcl-enabled field, strings which start with
 "tcl:" are treated as Tcl expressions and get expanded at runtime.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_query_string">
	<documentation>
 Gets query string value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_from_profile">
	<documentation>
 Sets a from profile value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_from_profile">
	<documentation>
 Gets a from profile value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_policy">
	<documentation>
 Sets a policy to invoke.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_policy">
	<documentation>
 Gets a policy to invoke.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_expression">
	<documentation>
 Sets a Tcl expression value. This is a Tcl-enabled field which is
 always treated as a Tcl expression.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_expression">
	<documentation>
 Gets a Tcl expression value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_pool">
	<documentation>
 Sets a pool value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_pool">
	<documentation>
 Gets a pool value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_clone_pool">
	<documentation>
 Sets a clone pool value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_clone_pool">
	<documentation>
 Gets a clone pool value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_member">
	<documentation>
 Sets a member value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_member">
	<documentation>
 Gets a member value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_node">
	<documentation>
 Sets a node value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_node">
	<documentation>
 Gets a node value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_snat_automap_state">
	<documentation>
 Sets whether or not to use SNAT automap for a connection.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_snat_automap_state">
	<documentation>
 Gets whether or not to use SNAT automap for a connection.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_snatpool">
	<documentation>
 Sets the SNAT Pool for a connection.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_snatpool">
	<documentation>
 Gets the SNAT Pool for a connection.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_nexthop">
	<documentation>
 Sets a nexthop value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_nexthop">
	<documentation>
 Gets a nexthop value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_rateclass">
	<documentation>
 Sets a rateclass value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_rateclass">
	<documentation>
 Gets a rateclass value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_vlan">
	<documentation>
 Sets a VLAN value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_vlan">
	<documentation>
 Gets a VLAN value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_virtual_server">
	<documentation>
 Sets a virtual server.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_virtual_server">
	<documentation>
 Gets a virtual server.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_internal_virtual_server">
	<documentation>
 Sets an internal virtual server.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_internal_virtual_server">
	<documentation>
 Gets an internal virtual server.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_application">
	<documentation>
 Sets an application.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_application">
	<documentation>
 Gets an application.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_category">
	<documentation>
 Sets a category.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_category">
	<documentation>
 Gets a category.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_priority">
	<documentation>
 Sets a priority value. Priorities correspond to Syslog priorities and
 may only be "debug", "info", "notice", "warning", "err", "crit",
 "alert", or "emerg".

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_priority">
	<documentation>
 Gets a priority value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_protocol">
	<documentation>
 Sets a protocol value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_protocol">
	<documentation>
 Gets a protocol value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_message">
	<documentation>
 Sets a message value.  As a Tcl-enabled field, strings which start with
 "tcl:" are treated as Tcl expressions and get expanded at runtime.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_message">
	<documentation>
 Gets the message for a connection when it triggers a Content Policy
 Action.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_facility">
	<documentation>
 Sets a Syslog facility. The facilities may be "user", "local0",
 "local1", "local2", "local3", "local4", "local5", "local6",
 "local7", "syslog", "security", "authpriv", "daemon", "kern", "cron",
 "ftp", "lpr", "mail", "news", or "uucp".

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_facility">
	<documentation>
 Gets a Syslog facility.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_port">
	<documentation>
 Sets a port value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_port">
	<documentation>
 Gets a port value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_offset">
	<documentation>
 Sets an offset value for a connection's cookie hash persistence.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_offset">
	<documentation>
 Gets an offset value for a connection's cookie hash persistence.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_status">
	<documentation>
 Sets a status value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_status">
	<documentation>
 Gets a status value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_timeout">
	<documentation>
 Sets a timeout value in seconds. The timeout must be a non-negative
 number.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_timeout">
	<documentation>
 Gets a timeout value in seconds.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_vlan_id">
	<documentation>
 Sets a VLAN ID value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_vlan_id">
	<documentation>
 Gets a VLAN ID value.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_pin_state">
	<documentation>
 Sets the the state to pin cached content in memory.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_pin_state">
	<documentation>
 Gets the the state to pin cached content in memory.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_defer_state">
	<documentation>
 Sets whether to defer a PolicyAction. For example, when defer is set
 to true with POLICY_ACTION_CLASSIFY, the classification of a
 connection is deferred.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_defer_state">
	<documentation>
 Gets whether to defer a PolicyAction.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_action_ssl_session_id_state">
	<documentation>
 Sets whether to set an SSL session ID.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_action_ssl_session_id_state">
	<documentation>
 Gets whether to set an SSL session ID.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_version">
	<documentation>
 Gets the version information for this interface.

        	</documentation>
		<soap:operation soapAction="urn:iControl:LocalLB/ContentPolicy"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:LocalLB/ContentPolicy"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>
</binding>

<!-- service -->

<service name="LocalLB.ContentPolicy">
	<documentation>
 The Content Policy interface configures the list of Content Policies
 used by the Content Policy Manager to modify and redirect traffic based
 upon a set of Content Policy Conditions a connection could match and
 Content Policy Actions taken based on those conditions matched. Given the
 nature of Content Policies, a user of this API should familiarize
 themselves with iControl transactions described in the System::Session
 interface.

 &lt;p&gt;As a guide for creating the list of valid Content Policy Conditions, the
 allowable configurations are listed below. A Content Policy Operand Type is
 given with the Content Policy Requires needed on the Content Policy, the
 Content Policy Events that can be selected upon, the specific Content Policy
 Selectors that can be used, and the functions used to configure those selectors.&lt;/p&gt;

 &lt;ul&gt;
 &lt;li&gt;POLICY_OPERAND_TCP
 &lt;ul&gt;&lt;li&gt;This operand is only valid when the Content Policy is associated with the following ContentPolicy::PolicyRequires:
 &lt;ul&gt;&lt;li&gt;POLICY_REQUIRES_TCP&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;The Content Policy Operand supports these LocalLB:::PolicyEvents:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_SSL_CLIENT_HELLO&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_SSL_SERVER_HELLO&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_SSL_SERVER_HANDSHAKE&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_RESPONSE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;These are the supported LocalLB::PolicySelectors and the functions used to set selections:
 &lt;ul&gt;&lt;li&gt;POLICY_SELECTOR_ADDRESS
 &lt;ul&gt;&lt;li&gt;set_condition_internal_state&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_PORT
 &lt;ul&gt;&lt;li&gt;set_condition_internal_state&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_MSS
 &lt;ul&gt;&lt;li&gt;set_condition_internal_state&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_RTT
 &lt;ul&gt;&lt;li&gt;set_condition_internal_state&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_VLAN
 &lt;ul&gt;&lt;li&gt;set_condition_internal_state&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_VLAN_ID
 &lt;ul&gt;&lt;li&gt;set_condition_internal_state&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_ROUTE_DOMAIN
 &lt;ul&gt;&lt;li&gt;set_condition_internal_state&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_OPERAND_CLIENT_SSL
 &lt;ul&gt;&lt;li&gt;This operand is only valid when the Content Policy is associated with the following ContentPolicy::PolicyRequires:
 &lt;ul&gt;&lt;li&gt;POLICY_REQUIRES_CLIENT_SSL&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;The Content Policy Operand supports these LocalLB:::PolicyEvents:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_RESPONSE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;These are the supported LocalLB::PolicySelectors and the functions used to set selections:
 &lt;ul&gt;&lt;li&gt;POLICY_SELECTOR_PROTOCOL
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_CIPHER
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_CIPHER_BITS
 &lt;ul&gt;&lt;li&gt;add_condition_values (with number formatted strings)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_OPERAND_HTTP_METHOD
 &lt;ul&gt;&lt;li&gt;This operand is only valid when the Content Policy is associated with the following ContentPolicy::PolicyRequires:
 &lt;ul&gt;&lt;li&gt;POLICY_REQUIRES_HTTP&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;The Content Policy Operand supports these LocalLB:::PolicyEvents:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;These are the supported LocalLB::PolicySelectors and the functions used to set selections:
 &lt;ul&gt;&lt;li&gt;POLICY_SELECTOR_ALL
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_OPERAND_HTTP_URI
 &lt;ul&gt;&lt;li&gt;This operand is only valid when the Content Policy is associated with the following ContentPolicy::PolicyRequires:
 &lt;ul&gt;&lt;li&gt;POLICY_REQUIRES_HTTP&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;The Content Policy Operand supports these LocalLB:::PolicyEvents:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;These are the supported LocalLB::PolicySelectors and the functions used to set selections:
 &lt;ul&gt;&lt;li&gt;POLICY_SELECTOR_ALL
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_SCHEME
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_HOST
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_PATH
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_QUERY_STRING
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_EXTENSION
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_PATH_SEGMENT
 &lt;ul&gt;&lt;li&gt;set_condition_index&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_QUERY_PARAMETER
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_UNNAMED_QUERY_PARAMETER
 &lt;ul&gt;&lt;li&gt;set_condition_index&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_PORT
 &lt;ul&gt;&lt;li&gt;add_condition_values (with number formatted strings)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_OPERAND_HTTP_VERSION
 &lt;ul&gt;&lt;li&gt;This operand is only valid when the Content Policy is associated with the following ContentPolicy::PolicyRequires:
 &lt;ul&gt;&lt;li&gt;POLICY_REQUIRES_HTTP&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;The Content Policy Operand supports these LocalLB:::PolicyEvents:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_RESPONSE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;These are the supported LocalLB::PolicySelectors and the functions used to set selections:
 &lt;ul&gt;&lt;li&gt;POLICY_SELECTOR_ALL
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_MAJOR
 &lt;ul&gt;&lt;li&gt;add_condition_values (with number formatted strings)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_MINOR
 &lt;ul&gt;&lt;li&gt;add_condition_values (with number formatted strings)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_PROTOCOL
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_OPERAND_HTTP_STATUS
 &lt;ul&gt;&lt;li&gt;This operand is only valid when the Content Policy is associated with the following ContentPolicy::PolicyRequires:
 &lt;ul&gt;&lt;li&gt;POLICY_REQUIRES_HTTP&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;The Content Policy Operand supports these LocalLB:::PolicyEvents:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_RESPONSE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;These are the supported LocalLB::PolicySelectors and the functions used to set selections:
 &lt;ul&gt;&lt;li&gt;POLICY_SELECTOR_ALL
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_CODE
 &lt;ul&gt;&lt;li&gt;add_condition_values (with number formatted strings)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_TEXT
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_OPERAND_HTTP_HOST
 &lt;ul&gt;&lt;li&gt;This operand is only valid when the Content Policy is associated with the following ContentPolicy::PolicyRequires:
 &lt;ul&gt;&lt;li&gt;POLICY_REQUIRES_HTTP&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;The Content Policy Operand supports these LocalLB:::PolicyEvents:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;These are the supported LocalLB::PolicySelectors and the functions used to set selections:
 &lt;ul&gt;&lt;li&gt;POLICY_SELECTOR_ALL
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_HOST
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_PORT
 &lt;ul&gt;&lt;li&gt;add_condition_values (with number formatted strings)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_OPERAND_HTTP_HEADER
 &lt;ul&gt;&lt;li&gt;This operand is only valid when the Content Policy is associated with the following ContentPolicy::PolicyRequires:
 &lt;ul&gt;&lt;li&gt;POLICY_REQUIRES_HTTP&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;The Content Policy Operand supports these LocalLB:::PolicyEvents:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_RESPONSE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;These are the supported LocalLB::PolicySelectors and the functions used to set selections:
 &lt;ul&gt;&lt;li&gt;POLICY_SELECTOR_ALL
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_OPERAND_HTTP_REFERER
 &lt;ul&gt;&lt;li&gt;This operand is only valid when the Content Policy is associated with the following ContentPolicy::PolicyRequires:
 &lt;ul&gt;&lt;li&gt;POLICY_REQUIRES_HTTP&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;The Content Policy Operand supports these LocalLB:::PolicyEvents:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;These are the supported LocalLB::PolicySelectors and the functions used to set selections:
 &lt;ul&gt;&lt;li&gt;POLICY_SELECTOR_ALL
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_SCHEME
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_HOST
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_PATH
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_QUERY_STRING
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_EXTENSION
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_PATH_SEGMENT
 &lt;ul&gt;&lt;li&gt;set_condition_index&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_QUERY_PARAMETER
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_UNNAMED_QUERY_PARAMETER
 &lt;ul&gt;&lt;li&gt;set_condition_index&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_PORT
 &lt;ul&gt;&lt;li&gt;add_condition_values (with number formatted strings)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_OPERAND_HTTP_COOKIE
 &lt;ul&gt;&lt;li&gt;This operand is only valid when the Content Policy is associated with the following ContentPolicy::PolicyRequires:
 &lt;ul&gt;&lt;li&gt;POLICY_REQUIRES_HTTP&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;The Content Policy Operand supports these LocalLB:::PolicyEvents:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;These are the supported LocalLB::PolicySelectors and the functions used to set selections:
 &lt;ul&gt;&lt;li&gt;POLICY_SELECTOR_ALL
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_OPERAND_HTTP_SET_COOKIE
 &lt;ul&gt;&lt;li&gt;This operand is only valid when the Content Policy is associated with the following ContentPolicy::PolicyRequires:
 &lt;ul&gt;&lt;li&gt;POLICY_REQUIRES_HTTP&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;The Content Policy Operand supports these LocalLB:::PolicyEvents:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_RESPONSE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;These are the supported LocalLB::PolicySelectors and the functions used to set selections:
 &lt;ul&gt;&lt;li&gt;POLICY_SELECTOR_VALUE
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_PATH
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_DOMAIN
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_EXPIRY
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_VERSION
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_OPERAND_HTTP_BASIC_AUTH
 &lt;ul&gt;&lt;li&gt;This operand is only valid when the Content Policy is associated with the following ContentPolicy::PolicyRequires:
 &lt;ul&gt;&lt;li&gt;POLICY_REQUIRES_HTTP&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;The Content Policy Operand supports these LocalLB:::PolicyEvents:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;These are the supported LocalLB::PolicySelectors and the functions used to set selections:
 &lt;ul&gt;&lt;li&gt;POLICY_SELECTOR_USERNAME
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_PASSWORD
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_OPERAND_SSL_EXTENSION
 &lt;ul&gt;&lt;li&gt;This operand is only valid when the Content Policy is associated with the following ContentPolicy::PolicyRequires:
 &lt;ul&gt;&lt;li&gt;POLICY_REQUIRES_SSL_PERSISTENCE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;The Content Policy Operand supports these LocalLB:::PolicyEvents:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_SSL_CLIENT_HELLO&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_SSL_SERVER_HELLO&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;These are the supported LocalLB::PolicySelectors and the functions used to set selections:
 &lt;ul&gt;&lt;li&gt;POLICY_SELECTOR_SERVER_NAME
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_NPN
 &lt;ul&gt;&lt;li&gt;set_condition_index&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_ALPN
 &lt;ul&gt;&lt;li&gt;set_condition_index&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_OPERAND_SSL_CERT
 &lt;ul&gt;&lt;li&gt;This operand is only valid when the Content Policy is associated with the following ContentPolicy::PolicyRequires:
 &lt;ul&gt;&lt;li&gt;POLICY_REQUIRES_SSL_PERSISTENCE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;The Content Policy Operand supports these LocalLB:::PolicyEvents:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_SSL_SERVER_HANDSHAKE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;These are the supported LocalLB::PolicySelectors and the functions used to set selections:
 &lt;ul&gt;&lt;li&gt;POLICY_SELECTOR_COMMON_NAME
 &lt;ul&gt;&lt;li&gt;set_condition_index&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_OPERAND_GEOIP
 &lt;ul&gt;&lt;li&gt;This operand is only valid when the Content Policy is associated with the following ContentPolicy::PolicyRequires:
 &lt;ul&gt;&lt;li&gt;POLICY_REQUIRES_HTTP&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;The Content Policy Operand supports these LocalLB:::PolicyEvents:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_SSL_CLIENT_HELLO&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_SSL_SERVER_HELLO&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_SSL_SERVER_HANDSHAKE&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_RESPONSE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;These are the supported LocalLB::PolicySelectors and the functions used to set selections:
 &lt;ul&gt;&lt;li&gt;POLICY_SELECTOR_CONTINENT
 &lt;ul&gt;&lt;li&gt;set_condition_internal_state&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_COUNTRY_CODE
 &lt;ul&gt;&lt;li&gt;set_condition_internal_state&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_COUNTRY_NAME
 &lt;ul&gt;&lt;li&gt;set_condition_internal_state&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_REGION_CODE
 &lt;ul&gt;&lt;li&gt;set_condition_internal_state&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_REGION_NAME
 &lt;ul&gt;&lt;li&gt;set_condition_internal_state&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_ORG
 &lt;ul&gt;&lt;li&gt;set_condition_internal_state&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_ISP
 &lt;ul&gt;&lt;li&gt;set_condition_internal_state&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_OPERAND_CPU_USAGE
 &lt;ul&gt;&lt;li&gt;The Content Policy Operand supports these LocalLB:::PolicyEvents:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_SSL_CLIENT_HELLO&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_SSL_SERVER_HELLO&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_SSL_SERVER_HANDSHAKE&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_RESPONSE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;These are the supported LocalLB::PolicySelectors and the functions used to set selections:
 &lt;ul&gt;&lt;li&gt;POLICY_SELECTOR_LAST_15SECS
 &lt;ul&gt;&lt;li&gt;add_condition_values (with number formatted strings)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_LAST_1MIN
 &lt;ul&gt;&lt;li&gt;add_condition_values (with number formatted strings)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_LAST_5MINS
 &lt;ul&gt;&lt;li&gt;add_condition_values (with number formatted strings)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_OPERAND_HTTP_USER_AGENT
 &lt;ul&gt;&lt;li&gt;This operand is only valid when the Content Policy is associated with the following ContentPolicy::PolicyRequires:
 &lt;ul&gt;&lt;li&gt;POLICY_REQUIRES_HTTP&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;The Content Policy Operand supports these LocalLB:::PolicyEvents:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;These are the supported LocalLB::PolicySelectors and the functions used to set selections:
 &lt;ul&gt;&lt;li&gt;POLICY_SELECTOR_DEVICE_MAKE
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_DEVICE_MODEL
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_BROWSER_TYPE
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_BROWSER_VERSION
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_SELECTOR_USER_AGENT_TOKEN
 &lt;ul&gt;&lt;li&gt;add_condition_values (with any string)&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;/ul&gt;

 &lt;p&gt;As a guide for creating the list of valid Content Policy Actions. The allowable
 configurations are listed below. A Content Policy Target is given with the
 Content Policy Events when the Content Policy Action can take place, the
 allowable Content Policy Actions that can take place, and the functions that
 can modify the specific Content Policy Targets.&lt;/p&gt;

 &lt;ul&gt;
 &lt;li&gt;POLICY_TARGET_HTTP
 &lt;ul&gt;&lt;li&gt;LocalLB::PolicyEvents that an action can work on:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_RESPONSE&lt;/li&gt;
 &lt;li&gt;The following ContentPolicy::PolicyActions take no parameters:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_ENABLE&lt;/li&gt;
 &lt;li&gt;POLICY_ACTION_DISABLE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_TARGET_HTTP_URI
 &lt;ul&gt;&lt;li&gt;LocalLB::PolicyEvents that an action can work on:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;
 &lt;li&gt;ContentPolicy::PolicyActions whose use is optional:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_REPLACE
 &lt;ul&gt;&lt;li&gt;set_action_value&lt;/li&gt;
 &lt;li&gt;set_action_path&lt;/li&gt;
 &lt;li&gt;set_action_query_string&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_TARGET_HTTP_HOST
 &lt;ul&gt;&lt;li&gt;LocalLB::PolicyEvents that an action can work on:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;ContentPolicy::PolicyActions that can be used on this Content Policy Target:
 &lt;ul&gt;&lt;li&gt;ContentPolicy::PolicyActions whose use is required:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_REPLACE
 &lt;ul&gt;&lt;li&gt;set_action_value&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_TARGET_HTTP_HEADER
 &lt;ul&gt;&lt;li&gt;LocalLB::PolicyEvents that an action can work on:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_RESPONSE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;ContentPolicy::PolicyActions that can be used on this Content Policy Target:
 &lt;ul&gt;&lt;li&gt;ContentPolicy::PolicyActions whose use is required:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_INSERT
 &lt;ul&gt;&lt;li&gt;set_action_name&lt;/li&gt;
 &lt;li&gt;set_action_value&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_ACTION_REPLACE
 &lt;ul&gt;&lt;li&gt;set_action_name&lt;/li&gt;
 &lt;li&gt;set_action_value&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_ACTION_REMOVE
 &lt;ul&gt;&lt;li&gt;set_action_name&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_TARGET_HTTP_REFERER
 &lt;ul&gt;&lt;li&gt;LocalLB::PolicyEvents that an action can work on:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;ContentPolicy::PolicyActions that can be used on this Content Policy Target:
 &lt;ul&gt;&lt;li&gt;ContentPolicy::PolicyActions whose use is required:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_INSERT
 &lt;ul&gt;&lt;li&gt;set_action_value&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;ContentPolicy::PolicyActions whose use is optional:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_REPLACE
 &lt;ul&gt;&lt;li&gt;set_action_value&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;The following ContentPolicy::PolicyActions take no parameters:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_REMOVE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_TARGET_HTTP_COOKIE
 &lt;ul&gt;&lt;li&gt;LocalLB::PolicyEvents that an action can work on:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;ContentPolicy::PolicyActions that can be used on this Content Policy Target:
 &lt;ul&gt;&lt;li&gt;ContentPolicy::PolicyActions whose use is required:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_INSERT
 &lt;ul&gt;&lt;li&gt;set_action_name&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_ACTION_REMOVE
 &lt;ul&gt;&lt;li&gt;set_action_name&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;ContentPolicy::PolicyActions whose use is optional:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_INSERT
 &lt;ul&gt;&lt;li&gt;set_action_value&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_TARGET_HTTP_SET_COOKIE
 &lt;ul&gt;&lt;li&gt;LocalLB::PolicyEvents that an action can work on:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_RESPONSE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;ContentPolicy::PolicyActions that can be used on this Content Policy Target:
 &lt;ul&gt;&lt;li&gt;ContentPolicy::PolicyActions whose use is required:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_INSERT
 &lt;ul&gt;&lt;li&gt;set_action_name&lt;/li&gt;
 &lt;li&gt;set_action_value&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_ACTION_REMOVE
 &lt;ul&gt;&lt;li&gt;set_action_name&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;ContentPolicy::PolicyActions whose use is optional:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_INSERT
 &lt;ul&gt;&lt;li&gt;set_action_domain&lt;/li&gt;
 &lt;li&gt;set_action_path&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_TARGET_HTTP_REPLY
 &lt;ul&gt;&lt;li&gt;This target is only valid when the Content Policy is associated with the following ContentPolicy::PolicyControls:
 &lt;ul&gt;&lt;li&gt;POLICY_CONTROLS_FORWARDING&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;LocalLB::PolicyEvents that an action can work on:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_RESPONSE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;ContentPolicy::PolicyActions that can be used on this Content Policy Target:
 &lt;ul&gt;&lt;li&gt;ContentPolicy::PolicyActions whose use is required:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_REDIRECT
 &lt;ul&gt;&lt;li&gt;set_action_location&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_TARGET_LOG
 &lt;ul&gt;&lt;li&gt;LocalLB::PolicyEvents that an action can work on:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_SSL_CLIENT_HELLO&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_SSL_SERVER_HELLO&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_SSL_SERVER_HANDSHAKE&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_RESPONSE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;ContentPolicy::PolicyActions that can be used on this Content Policy Target:
 &lt;ul&gt;&lt;li&gt;ContentPolicy::PolicyActions whose use is required:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_WRITE
 &lt;ul&gt;&lt;li&gt;set_action_message&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;ContentPolicy::PolicyActions whose use is optional:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_WRITE
 &lt;ul&gt;&lt;li&gt;set_action_facility&lt;/li&gt;
 &lt;li&gt;set_action_priority&lt;/li&gt;
 &lt;li&gt;set_action_ip_address&lt;/li&gt;
 &lt;li&gt;set_action_port&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_TARGET_PEM
 &lt;ul&gt;&lt;li&gt;This target is only valid when the Content Policy is associated with the following ContentPolicy::PolicyControls:
 &lt;ul&gt;&lt;li&gt;POLICY_CONTROLS_CLASSIFICATION&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;LocalLB::PolicyEvents that an action can work on:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_SSL_CLIENT_HELLO&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_SSL_SERVER_HELLO&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_SSL_SERVER_HANDSHAKE&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_RESPONSE&lt;/li&gt;
 &lt;li&gt;ContentPolicy::PolicyActions whose use is optional:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_CLASSIFY
 &lt;ul&gt;&lt;li&gt;set_action_application&lt;/li&gt;
 &lt;li&gt;set_action_category&lt;/li&gt;
 &lt;li&gt;set_action_protocol&lt;/li&gt;
 &lt;li&gt;set_action_defer_state&lt;/li&gt;
 &lt;li&gt;set_action_ssl_session_id_state&lt;/li&gt;
 &lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_TARGET_CACHE
 &lt;ul&gt;&lt;li&gt;This target is only valid when the Content Policy is associated with the following ContentPolicy::PolicyControls:
 &lt;ul&gt;&lt;li&gt;POLICY_CONTROLS_CACHING&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;LocalLB::PolicyEvents that an action can work on:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_RESPONSE&lt;/li&gt;
 &lt;li&gt;ContentPolicy::PolicyActions whose use is optional:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_ENABLE
 &lt;ul&gt;&lt;li&gt;set_action_pin_state&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;The following ContentPolicy::PolicyActions take no parameters:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_DISABLE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_TARGET_COMPRESS
 &lt;ul&gt;&lt;li&gt;This target is only valid when the Content Policy is associated with the following ContentPolicy::PolicyControls:
 &lt;ul&gt;&lt;li&gt;POLICY_CONTROLS_COMPRESSION&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;LocalLB::PolicyEvents that an action can work on:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_RESPONSE&lt;/li&gt;
 &lt;li&gt;The following ContentPolicy::PolicyActions take no parameters:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_ENABLE&lt;/li&gt;
 &lt;li&gt;POLICY_ACTION_DISABLE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_TARGET_DECOMPRESS
 &lt;ul&gt;&lt;li&gt;This target is only valid when the Content Policy is associated with the following ContentPolicy::PolicyControls:
 &lt;ul&gt;&lt;li&gt;POLICY_CONTROLS_COMPRESSION&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;LocalLB::PolicyEvents that an action can work on:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_RESPONSE&lt;/li&gt;
 &lt;li&gt;The following ContentPolicy::PolicyActions take no parameters:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_ENABLE&lt;/li&gt;
 &lt;li&gt;POLICY_ACTION_DISABLE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_TARGET_FORWARD
 &lt;ul&gt;&lt;li&gt;This target is only valid when the Content Policy is associated with the following ContentPolicy::PolicyControls:
 &lt;ul&gt;&lt;li&gt;POLICY_CONTROLS_FORWARDING&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;LocalLB::PolicyEvents that an action can work on:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;
 &lt;li&gt;ContentPolicy::PolicyActions whose use is optional:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_SELECT
 &lt;ul&gt;&lt;li&gt;set_action_pool&lt;/li&gt;
 &lt;li&gt;set_action_clone_pool&lt;/li&gt;
 &lt;li&gt;set_action_node&lt;/li&gt;
 &lt;li&gt;set_action_member&lt;/li&gt;
 &lt;li&gt;set_action_snat_automap_state&lt;/li&gt;
 &lt;li&gt;set_action_snatpool&lt;/li&gt;
 &lt;li&gt;set_action_nexthop&lt;/li&gt;
 &lt;li&gt;set_action_vlan&lt;/li&gt;
 &lt;li&gt;set_action_vlan_id&lt;/li&gt;
 &lt;li&gt;set_action_virtual&lt;/li&gt;
 &lt;li&gt;set_action_rateclass&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;The following ContentPolicy::PolicyActions take no parameters:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_RESET&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_TARGET_TCP_NAGLE
 &lt;ul&gt;&lt;li&gt;LocalLB::PolicyEvents that an action can work on:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;
 &lt;li&gt;The following ContentPolicy::PolicyActions take no parameters:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_ENABLE&lt;/li&gt;
 &lt;li&gt;POLICY_ACTION_DISABLE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_TARGET_WAM
 &lt;ul&gt;&lt;li&gt;This target is only valid when the Content Policy is associated with the following ContentPolicy::PolicyControls:
 &lt;ul&gt;&lt;li&gt;POLICY_CONTROLS_ACCELERATION&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;LocalLB::PolicyEvents that an action can work on:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;
 &lt;li&gt;The following ContentPolicy::PolicyActions take no parameters:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_ENABLE&lt;/li&gt;
 &lt;li&gt;POLICY_ACTION_DISABLE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_TARGET_ASM
 &lt;ul&gt;&lt;li&gt;This target is only valid when the Content Policy is associated with the following ContentPolicy::PolicyControls:
 &lt;ul&gt;&lt;li&gt;POLICY_CONTROLS_ASM&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;LocalLB::PolicyEvents that an action can work on:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;ContentPolicy::PolicyActions that can be used on this Content Policy Target:
 &lt;ul&gt;&lt;li&gt;ContentPolicy::PolicyActions whose use is required:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_ENABLE
 &lt;ul&gt;&lt;li&gt;set_action_policy&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;The following ContentPolicy::PolicyActions take no parameters:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_DISABLE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_TARGET_L7DOS
 &lt;ul&gt;&lt;li&gt;This target is only valid when the Content Policy is associated with the following ContentPolicy::PolicyControls:
 &lt;ul&gt;&lt;li&gt;POLICY_CONTROLS_L7DOS&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;LocalLB::PolicyEvents that an action can work on:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;
 &lt;li&gt;ContentPolicy::PolicyActions whose use is optional:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_ENABLE
 &lt;ul&gt;&lt;li&gt;set_action_from_profile&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;The following ContentPolicy::PolicyActions take no parameters:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_DISABLE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_TARGET_AVR
 &lt;ul&gt;&lt;li&gt;This target is only valid when the Content Policy is associated with the following ContentPolicy::PolicyControls:
 &lt;ul&gt;&lt;li&gt;POLICY_CONTROLS_AVR&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;LocalLB::PolicyEvents that an action can work on:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;
 &lt;li&gt;The following ContentPolicy::PolicyActions take no parameters:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_ENABLE&lt;/li&gt;
 &lt;li&gt;POLICY_ACTION_DISABLE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_TARGET_TCL
 &lt;ul&gt;&lt;li&gt;LocalLB::PolicyEvents that an action can work on:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_SSL_CLIENT_HELLO&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_SSL_SERVER_HELLO&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_SSL_SERVER_HANDSHAKE&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_RESPONSE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;ContentPolicy::PolicyActions that can be used on this Content Policy Target:
 &lt;ul&gt;&lt;li&gt;ContentPolicy::PolicyActions whose use is required:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_SET_VARIABLE
 &lt;ul&gt;&lt;li&gt;set_action_name&lt;/li&gt;
 &lt;li&gt;set_action_expression&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_TARGET_RESPONSE_ADAPT
 &lt;ul&gt;&lt;li&gt;This target is only valid when the Content Policy is associated with the following ContentPolicy::PolicyControls:
 &lt;ul&gt;&lt;li&gt;POLICY_CONTROLS_RESPONSE_ADAPTATION&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;LocalLB::PolicyEvents that an action can work on:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_RESPONSE&lt;/li&gt;
 &lt;li&gt;ContentPolicy::PolicyActions whose use is optional:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_ENABLE
 &lt;ul&gt;&lt;li&gt;set_action_internal_virtual&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;The following ContentPolicy::PolicyActions take no parameters:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_DISABLE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_TARGET_REQUEST_ADAPT
 &lt;ul&gt;&lt;li&gt;This target is only valid when the Content Policy is associated with the following ContentPolicy::PolicyControls:
 &lt;ul&gt;&lt;li&gt;POLICY_CONTROLS_REQUEST_ADAPTATION&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;LocalLB::PolicyEvents that an action can work on:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_RESPONSE&lt;/li&gt;
 &lt;li&gt;ContentPolicy::PolicyActions whose use is optional:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_ENABLE
 &lt;ul&gt;&lt;li&gt;set_action_internal_virtual&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;The following ContentPolicy::PolicyActions take no parameters:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_DISABLE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_TARGET_SERVER_SSL
 &lt;ul&gt;&lt;li&gt;This target is only valid when the Content Policy is associated with the following ContentPolicy::PolicyControls:
 &lt;ul&gt;&lt;li&gt;POLICY_CONTROLS_SERVER_SSL&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;LocalLB::PolicyEvents that an action can work on:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;
 &lt;li&gt;The following ContentPolicy::PolicyActions take no parameters:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_ENABLE&lt;/li&gt;
 &lt;li&gt;POLICY_ACTION_DISABLE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_TARGET_LTM_POLICY
 &lt;ul&gt;&lt;li&gt;LocalLB::PolicyEvents that an action can work on:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_SSL_CLIENT_HELLO&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_SSL_SERVER_HELLO&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_SSL_SERVER_HANDSHAKE&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;
 &lt;li&gt;POLICY_EVENT_RESPONSE&lt;/li&gt;
 &lt;li&gt;The following ContentPolicy::PolicyActions take no parameters:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_DISABLE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_TARGET_PERSIST
 &lt;ul&gt;&lt;li&gt;This target is only valid when the Content Policy is associated with the following ContentPolicy::PolicyControls:
 &lt;ul&gt;&lt;li&gt;POLICY_CONTROLS_PERSISTENCE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;LocalLB::PolicyEvents that an action can work on:
 &lt;ul&gt;&lt;li&gt;POLICY_EVENT_REQUEST&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;ContentPolicy::PolicyActions that can be used on this Content Policy Target:
 &lt;ul&gt;&lt;li&gt;ContentPolicy::PolicyActions whose use is required:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_PERSIST_COOKIE_HASH
 &lt;ul&gt;&lt;li&gt;set_action_name&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_ACTION_PERSIST_UNIVERSAL
 &lt;ul&gt;&lt;li&gt;set_action_key&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_ACTION_PERSIST_HASH
 &lt;ul&gt;&lt;li&gt;set_action_key&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_ACTION_PERSIST_CARP
 &lt;ul&gt;&lt;li&gt;set_action_key&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;ContentPolicy::PolicyActions whose use is optional:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_SOURCE_ADDRESS
 &lt;ul&gt;&lt;li&gt;set_action_netmask&lt;/li&gt;
 &lt;li&gt;set_action_timeout&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_ACTION_DESTINATION_ADDRESS
 &lt;ul&gt;&lt;li&gt;set_action_netmask&lt;/li&gt;
 &lt;li&gt;set_action_timeout&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_ACTION_PERSIST_COOKIE_INSERT
 &lt;ul&gt;&lt;li&gt;set_action_name&lt;/li&gt;
 &lt;li&gt;set_action_expiry&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_ACTION_PERSIST_COOKIE_REWRITE
 &lt;ul&gt;&lt;li&gt;set_action_name&lt;/li&gt;
 &lt;li&gt;set_action_expiry&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_ACTION_PERSIST_COOKIE_PASSIVE
 &lt;ul&gt;&lt;li&gt;set_action_name&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_ACTION_PERSIST_COOKIE_HASH
 &lt;ul&gt;&lt;li&gt;set_action_offset&lt;/li&gt;
 &lt;li&gt;set_action_length&lt;/li&gt;
 &lt;li&gt;set_action_timeout&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_ACTION_PERSIST_UNIVERSAL
 &lt;ul&gt;&lt;li&gt;set_action_timeout&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_ACTION_PERSIST_HASH
 &lt;ul&gt;&lt;li&gt;set_action_timeout&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;POLICY_ACTION_PERSIST_CARP
 &lt;ul&gt;&lt;li&gt;set_action_timeout&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;The following ContentPolicy::PolicyActions take no parameters:
 &lt;ul&gt;&lt;li&gt;POLICY_ACTION_DISABLE&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;/ul&gt;


        	</documentation>
	<port name="LocalLB.ContentPolicyPort" binding="tns:LocalLB.ContentPolicyBinding">
		<soap:address location="https://url_to_service"/>
	</port>
</service>
</definitions>
