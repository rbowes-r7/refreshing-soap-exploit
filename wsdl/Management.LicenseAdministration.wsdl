<?xml version="1.0" ?>
<!--
Copyright (c) 1996-2018, F5 Networks, Inc., Seattle, Washington. All rights reserved.  

F5, F5 Networks, the F5 logo, BIG-IP, 3-DNS, iControl, GLOBAL-SITE, SEE-IT, EDGE-FX, FireGuard, Internet Control Architecture, IP Application Switch, iRules, PACKET VELOCITY, SYN Check, CONTROL YOUR WORLD, OneConnect, ZoneRunner, uRoam, FirePass, and TrafficShield are registered trademarks or trademarks of F5 Networks, Inc., in the U.S. and certain other countries. 

All other trademarks mentioned in this document are the property of their respective owners. F5 Networks' trademarks may not be used in connection with any product or service except as permitted in writing by F5.

-->
<definitions name="Management.LicenseAdministration"
	targetNamespace="urn:iControl"
	xmlns:tns="urn:iControl"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
	xmlns="http://schemas.xmlsoap.org/wsdl/">

<!-- types -->

<types>
	<xsd:schema targetNamespace='urn:iControl'
		xmlns='http://www.w3.org/2001/XMLSchema'
		xmlns:SOAP-ENC='http://schemas.xmlsoap.org/soap/encoding/'
		xmlns:wsdl='http://schemas.xmlsoap.org/wsdl/'>
		<xsd:complexType name="Management.LicenseAdministration.ModuleExpirySequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Management.LicenseAdministration.ModuleExpiry[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:simpleType name="Common.OctetSequence">
			<xsd:restriction base="xsd:base64Binary"/>
		</xsd:simpleType>
		<xsd:simpleType name="Common.EnabledState">
			<xsd:restriction base="xsd:string">
				<xsd:enumeration value="STATE_DISABLED">
					<xsd:annotation>
						<xsd:documentation>STATE_DISABLED</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="STATE_ENABLED">
					<xsd:annotation>
						<xsd:documentation>STATE_ENABLED</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
			</xsd:restriction>
		</xsd:simpleType>
		<xsd:complexType name="Management.LicenseAdministration.ModuleKeySequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Management.LicenseAdministration.ModuleKey[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="Common.StringSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:string[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="Management.LicenseAdministration.ModuleKey">
			<xsd:sequence>
				<xsd:element name="description" type="xsd:string"/>
				<xsd:element name="key" type="xsd:string"/>
				<xsd:element name="child_description" type="tns:Common.StringSequence"/>
				<xsd:element name="active" type="xsd:boolean"/>
			</xsd:sequence>
		</xsd:complexType>
		<xsd:complexType name="Management.LicenseAdministration.ModuleKeyTimeLimits">
			<xsd:sequence>
				<xsd:element name="current_system_time" type="xsd:long"/>
				<xsd:element name="start_time" type="xsd:long"/>
				<xsd:element name="end_time" type="xsd:long"/>
			</xsd:sequence>
		</xsd:complexType>
		<xsd:complexType name="Common.BooleanSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:boolean[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="Common.TMOSModuleSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Common.TMOSModule[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="Management.LicenseAdministration.EvaluationExpiration">
			<xsd:sequence>
				<xsd:element name="current_system_time" type="xsd:long"/>
				<xsd:element name="evaluation_start" type="xsd:long"/>
				<xsd:element name="evaluation_expire" type="xsd:long"/>
			</xsd:sequence>
		</xsd:complexType>
		<xsd:complexType name="Management.LicenseAdministration.TimeLimitedModuleKeySequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Management.LicenseAdministration.TimeLimitedModuleKey[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="Management.LicenseAdministration.ModuleExpiry">
			<xsd:sequence>
				<xsd:element name="enabled" type="tns:Common.EnabledState"/>
				<xsd:element name="expires" type="xsd:boolean"/>
				<xsd:element name="expiry_time" type="xsd:long"/>
			</xsd:sequence>
		</xsd:complexType>
		<xsd:complexType name="Management.LicenseAdministration.TimeLimitedModuleKey">
			<xsd:sequence>
				<xsd:element name="description" type="xsd:string"/>
				<xsd:element name="key" type="xsd:string"/>
				<xsd:element name="limits" type="tns:Management.LicenseAdministration.ModuleKeyTimeLimits"/>
				<xsd:element name="active" type="xsd:boolean"/>
			</xsd:sequence>
		</xsd:complexType>
		<xsd:simpleType name="Common.TMOSModule">
			<xsd:restriction base="xsd:string">
				<xsd:enumeration value="TMOS_MODULE_ASM">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_ASM</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_SAM">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_SAM</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_WAM">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_WAM</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_PSM">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_PSM</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_WOM">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_WOM</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_LC">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_LC</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_LTM">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_LTM</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_GTM">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_GTM</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_UNKNOWN">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_UNKNOWN</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_WOML">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_WOML</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_APML">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_APML</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_EM">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_EM</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_VCMP">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_VCMP</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_TMOS">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_TMOS</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_HOST">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_HOST</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_UI">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_UI</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_MONITORS">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_MONITORS</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_AVR">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_AVR</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_PEM">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_PEM</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_CGNAT">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_CGNAT</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_AFM">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_AFM</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_AM">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_AM</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_SWG">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_SWG</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_FPS">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_FPS</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_ILX">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_ILX</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_URLDB">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_URLDB</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_TAM">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_TAM</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_DOS">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_DOS</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="TMOS_MODULE_SSLO">
					<xsd:annotation>
						<xsd:documentation>TMOS_MODULE_SSLO</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
			</xsd:restriction>
		</xsd:simpleType>
		<xsd:complexType name="Common.EnabledStateSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Common.EnabledState[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:schema>
</types>

<!-- message -->

<message name="Management.LicenseAdministration.get_license_activation_statusRequest">
</message>
<message name="Management.LicenseAdministration.get_license_activation_statusResponse">
	<part name="return" type="tns:Common.EnabledState"/>
</message>

<message name="Management.LicenseAdministration.is_evaluation_licenseRequest">
</message>
<message name="Management.LicenseAdministration.is_evaluation_licenseResponse">
	<part name="return" type="xsd:boolean"/>
</message>

<message name="Management.LicenseAdministration.get_evaluation_license_expirationRequest">
</message>
<message name="Management.LicenseAdministration.get_evaluation_license_expirationResponse">
	<part name="return" type="tns:Management.LicenseAdministration.EvaluationExpiration"/>
</message>

<message name="Management.LicenseAdministration.get_registration_keysRequest">
</message>
<message name="Management.LicenseAdministration.get_registration_keysResponse">
	<part name="return" type="tns:Common.StringSequence"/>
</message>

<message name="Management.LicenseAdministration.get_module_keysRequest">
</message>
<message name="Management.LicenseAdministration.get_module_keysResponse">
	<part name="return" type="tns:Management.LicenseAdministration.ModuleKeySequence"/>
</message>

<message name="Management.LicenseAdministration.get_time_limited_module_keysRequest">
</message>
<message name="Management.LicenseAdministration.get_time_limited_module_keysResponse">
	<part name="return" type="tns:Management.LicenseAdministration.TimeLimitedModuleKeySequence"/>
</message>

<message name="Management.LicenseAdministration.get_module_enabled_stateRequest">
	<part name="modules" type="tns:Common.TMOSModuleSequence"/>
</message>
<message name="Management.LicenseAdministration.get_module_enabled_stateResponse">
	<part name="return" type="tns:Common.EnabledStateSequence"/>
</message>

<message name="Management.LicenseAdministration.get_module_expiryRequest">
	<part name="modules" type="tns:Common.TMOSModuleSequence"/>
</message>
<message name="Management.LicenseAdministration.get_module_expiryResponse">
	<part name="return" type="tns:Management.LicenseAdministration.ModuleExpirySequence"/>
</message>

<message name="Management.LicenseAdministration.check_registration_key_crcRequest">
	<part name="registration_keys" type="tns:Common.StringSequence"/>
</message>
<message name="Management.LicenseAdministration.check_registration_key_crcResponse">
	<part name="return" type="tns:Common.BooleanSequence"/>
</message>

<message name="Management.LicenseAdministration.get_system_dossierRequest">
	<part name="registration_keys" type="tns:Common.StringSequence"/>
</message>
<message name="Management.LicenseAdministration.get_system_dossierResponse">
	<part name="return" type="xsd:string"/>
</message>

<message name="Management.LicenseAdministration.activate_licenseRequest">
	<part name="registration_keys" type="tns:Common.StringSequence"/>
</message>
<message name="Management.LicenseAdministration.activate_licenseResponse">
	<part name="return" type="xsd:boolean"/>
</message>

<message name="Management.LicenseAdministration.revoke_licenseRequest">
</message>
<message name="Management.LicenseAdministration.revoke_licenseResponse">
	<part name="return" type="xsd:boolean"/>
</message>

<message name="Management.LicenseAdministration.install_licenseRequest">
	<part name="license_file_data" type="tns:Common.OctetSequence"/>
</message>
<message name="Management.LicenseAdministration.install_licenseResponse">
</message>

<message name="Management.LicenseAdministration.install_license_from_fileRequest">
	<part name="license_file" type="xsd:string"/>
</message>
<message name="Management.LicenseAdministration.install_license_from_fileResponse">
</message>

<message name="Management.LicenseAdministration.get_license_fileRequest">
</message>
<message name="Management.LicenseAdministration.get_license_fileResponse">
	<part name="return" type="tns:Common.OctetSequence"/>
</message>

<message name="Management.LicenseAdministration.get_copyright_fileRequest">
</message>
<message name="Management.LicenseAdministration.get_copyright_fileResponse">
	<part name="return" type="tns:Common.OctetSequence"/>
</message>

<message name="Management.LicenseAdministration.get_eula_fileRequest">
</message>
<message name="Management.LicenseAdministration.get_eula_fileResponse">
	<part name="return" type="tns:Common.OctetSequence"/>
</message>

<message name="Management.LicenseAdministration.get_versionRequest">
</message>
<message name="Management.LicenseAdministration.get_versionResponse">
	<part name="return" type="xsd:string"/>
</message>

<!-- portType -->

<portType name="Management.LicenseAdministrationPortType">
	<operation name="get_license_activation_status">
	<documentation>
 Checks to see whether the device has been licensed.
 
        	</documentation>
		<input message="tns:Management.LicenseAdministration.get_license_activation_statusRequest"/>
		<output message="tns:Management.LicenseAdministration.get_license_activation_statusResponse"/>
	</operation>
	<operation name="is_evaluation_license">
	<documentation>
 Checks to see whether the device is running with an evaluation license.
 
        	</documentation>
		<input message="tns:Management.LicenseAdministration.is_evaluation_licenseRequest"/>
		<output message="tns:Management.LicenseAdministration.is_evaluation_licenseResponse"/>
	</operation>
	<operation name="get_evaluation_license_expiration">
	<documentation>
 Gets information on when the evaluation license will expire.
 
        	</documentation>
		<input message="tns:Management.LicenseAdministration.get_evaluation_license_expirationRequest"/>
		<output message="tns:Management.LicenseAdministration.get_evaluation_license_expirationResponse"/>
	</operation>
	<operation name="get_registration_keys">
	<documentation>
 Gets the list of registration keys used to license the device.
 
 This returns the base key first, then add-on keys.  As of
 v10.0.0, there are new add-on keys that are time limited;
 with this method you can tell they are there but not when
 they expire.  If that matters, you should use the newer
 method get_time_limited_module_keys.  All of the keys
 returned are active keys.

        	</documentation>
		<input message="tns:Management.LicenseAdministration.get_registration_keysRequest"/>
		<output message="tns:Management.LicenseAdministration.get_registration_keysResponse"/>
	</operation>
	<operation name="get_module_keys">
	<documentation>
 Gets the module keys used to license the device, including
 descriptive information about them.  You will get active
 and inactive keys (and the record has a field describing
 whether it is active).  See also get_time_limited_module_keys.
 
        	</documentation>
		<input message="tns:Management.LicenseAdministration.get_module_keysRequest"/>
		<output message="tns:Management.LicenseAdministration.get_module_keysResponse"/>
	</operation>
	<operation name="get_time_limited_module_keys">
	<documentation>
 Gets the time limited module keys used to license the
 device, including descriptive information about them.  You
 will get active and inactive keys (and the record has a
 field describing whether it is active).
 
        	</documentation>
		<input message="tns:Management.LicenseAdministration.get_time_limited_module_keysRequest"/>
		<output message="tns:Management.LicenseAdministration.get_time_limited_module_keysResponse"/>
	</operation>
	<operation name="get_module_enabled_state">
	<documentation>
 Gets information indicating whether the given modules are enabled
 in the license.
 
 Caution!  This enabled state is what is specified in the license
 for the modules without regard for whether the module is
 provisionable or provisioned under this hardware and configuration.
 See the Provision interface.

        	</documentation>
		<input message="tns:Management.LicenseAdministration.get_module_enabled_stateRequest"/>
		<output message="tns:Management.LicenseAdministration.get_module_enabled_stateResponse"/>
	</operation>
	<operation name="get_module_expiry">
	<documentation>
 Gets information about expiry of the given modules.
 
 Caution!  The expiry information does not indicate whether a module
 is provisionable or provisioned.  See the Provision interface.

 Note:  This returns the enabled state as well.  When getting the
 module expiry information, we suggest making use of the enabled
 state returned here rather than getting enabled state separately.
 
        	</documentation>
		<input message="tns:Management.LicenseAdministration.get_module_expiryRequest"/>
		<output message="tns:Management.LicenseAdministration.get_module_expiryResponse"/>
	</operation>
	<operation name="check_registration_key_crc">
	<documentation>
 Checks to see if the specified registration keys will pass the CRC validation.
 
        	</documentation>
		<input message="tns:Management.LicenseAdministration.check_registration_key_crcRequest"/>
		<output message="tns:Management.LicenseAdministration.check_registration_key_crcResponse"/>
	</operation>
	<operation name="get_system_dossier">
	<documentation>
 Gets the kernel dossier based on the specified registration keys.
 
        	</documentation>
		<input message="tns:Management.LicenseAdministration.get_system_dossierRequest"/>
		<output message="tns:Management.LicenseAdministration.get_system_dossierResponse"/>
	</operation>
	<operation name="activate_license">
	<documentation>
 Activates the license for the specified registration keys.

        	</documentation>
		<input message="tns:Management.LicenseAdministration.activate_licenseRequest"/>
		<output message="tns:Management.LicenseAdministration.activate_licenseResponse"/>
	</operation>
	<operation name="revoke_license">
	<documentation>
 Revokes the currently active license.

        	</documentation>
		<input message="tns:Management.LicenseAdministration.revoke_licenseRequest"/>
		<output message="tns:Management.LicenseAdministration.revoke_licenseResponse"/>
	</operation>
	<operation name="install_license">
	<documentation>
 Installs and authorizes the device using the specified stream of license file data.
 
        	</documentation>
		<input message="tns:Management.LicenseAdministration.install_licenseRequest"/>
		<output message="tns:Management.LicenseAdministration.install_licenseResponse"/>
	</operation>
	<operation name="install_license_from_file">
	<documentation>
 Installs and authorizes the device using the specified license file somewhere on the device.
 
        	</documentation>
		<input message="tns:Management.LicenseAdministration.install_license_from_fileRequest"/>
		<output message="tns:Management.LicenseAdministration.install_license_from_fileResponse"/>
	</operation>
	<operation name="get_license_file">
	<documentation>
 Retrieves the active license file.
 
        	</documentation>
		<input message="tns:Management.LicenseAdministration.get_license_fileRequest"/>
		<output message="tns:Management.LicenseAdministration.get_license_fileResponse"/>
	</operation>
	<operation name="get_copyright_file">
	<documentation>
 Retrieves the copyright file.
 
        	</documentation>
		<input message="tns:Management.LicenseAdministration.get_copyright_fileRequest"/>
		<output message="tns:Management.LicenseAdministration.get_copyright_fileResponse"/>
	</operation>
	<operation name="get_eula_file">
	<documentation>
 Retrieves the EULA agreement file.
 
        	</documentation>
		<input message="tns:Management.LicenseAdministration.get_eula_fileRequest"/>
		<output message="tns:Management.LicenseAdministration.get_eula_fileResponse"/>
	</operation>
	<operation name="get_version">
	<documentation>
 Gets the version information for this interface.

        	</documentation>
		<input message="tns:Management.LicenseAdministration.get_versionRequest"/>
		<output message="tns:Management.LicenseAdministration.get_versionResponse"/>
	</operation>
</portType>

<!-- binding -->

<binding name="Management.LicenseAdministrationBinding" type="tns:Management.LicenseAdministrationPortType">
	<soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
	<operation name="get_license_activation_status">
	<documentation>
 Checks to see whether the device has been licensed.
 
        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/LicenseAdministration"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="is_evaluation_license">
	<documentation>
 Checks to see whether the device is running with an evaluation license.
 
        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/LicenseAdministration"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_evaluation_license_expiration">
	<documentation>
 Gets information on when the evaluation license will expire.
 
        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/LicenseAdministration"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_registration_keys">
	<documentation>
 Gets the list of registration keys used to license the device.
 
 This returns the base key first, then add-on keys.  As of
 v10.0.0, there are new add-on keys that are time limited;
 with this method you can tell they are there but not when
 they expire.  If that matters, you should use the newer
 method get_time_limited_module_keys.  All of the keys
 returned are active keys.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/LicenseAdministration"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_module_keys">
	<documentation>
 Gets the module keys used to license the device, including
 descriptive information about them.  You will get active
 and inactive keys (and the record has a field describing
 whether it is active).  See also get_time_limited_module_keys.
 
        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/LicenseAdministration"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_time_limited_module_keys">
	<documentation>
 Gets the time limited module keys used to license the
 device, including descriptive information about them.  You
 will get active and inactive keys (and the record has a
 field describing whether it is active).
 
        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/LicenseAdministration"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_module_enabled_state">
	<documentation>
 Gets information indicating whether the given modules are enabled
 in the license.
 
 Caution!  This enabled state is what is specified in the license
 for the modules without regard for whether the module is
 provisionable or provisioned under this hardware and configuration.
 See the Provision interface.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/LicenseAdministration"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_module_expiry">
	<documentation>
 Gets information about expiry of the given modules.
 
 Caution!  The expiry information does not indicate whether a module
 is provisionable or provisioned.  See the Provision interface.

 Note:  This returns the enabled state as well.  When getting the
 module expiry information, we suggest making use of the enabled
 state returned here rather than getting enabled state separately.
 
        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/LicenseAdministration"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="check_registration_key_crc">
	<documentation>
 Checks to see if the specified registration keys will pass the CRC validation.
 
        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/LicenseAdministration"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_system_dossier">
	<documentation>
 Gets the kernel dossier based on the specified registration keys.
 
        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/LicenseAdministration"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="activate_license">
	<documentation>
 Activates the license for the specified registration keys.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/LicenseAdministration"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="revoke_license">
	<documentation>
 Revokes the currently active license.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/LicenseAdministration"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="install_license">
	<documentation>
 Installs and authorizes the device using the specified stream of license file data.
 
        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/LicenseAdministration"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="install_license_from_file">
	<documentation>
 Installs and authorizes the device using the specified license file somewhere on the device.
 
        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/LicenseAdministration"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_license_file">
	<documentation>
 Retrieves the active license file.
 
        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/LicenseAdministration"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_copyright_file">
	<documentation>
 Retrieves the copyright file.
 
        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/LicenseAdministration"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_eula_file">
	<documentation>
 Retrieves the EULA agreement file.
 
        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/LicenseAdministration"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_version">
	<documentation>
 Gets the version information for this interface.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/LicenseAdministration"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/LicenseAdministration"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>
</binding>

<!-- service -->

<service name="Management.LicenseAdministration">
	<documentation>
 The LicenseAdministration interface exposes methods that enable you to authorize the system,
 either manually or in an automated fashion.  This interface allows you to generate license
 files, install previously generated licenses, and view other licensing characteristics.

 This interface does not support transactions.

        	</documentation>
	<port name="Management.LicenseAdministrationPort" binding="tns:Management.LicenseAdministrationBinding">
		<soap:address location="https://url_to_service"/>
	</port>
</service>
</definitions>
