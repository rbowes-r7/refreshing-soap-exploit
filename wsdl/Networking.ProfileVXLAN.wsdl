<?xml version="1.0" ?>
<!--
Copyright (c) 1996-2018, F5 Networks, Inc., Seattle, Washington. All rights reserved.  

F5, F5 Networks, the F5 logo, BIG-IP, 3-DNS, iControl, GLOBAL-SITE, SEE-IT, EDGE-FX, FireGuard, Internet Control Architecture, IP Application Switch, iRules, PACKET VELOCITY, SYN Check, CONTROL YOUR WORLD, OneConnect, ZoneRunner, uRoam, FirePass, and TrafficShield are registered trademarks or trademarks of F5 Networks, Inc., in the U.S. and certain other countries. 

All other trademarks mentioned in this document are the property of their respective owners. F5 Networks' trademarks may not be used in connection with any product or service except as permitted in writing by F5.

-->
<definitions name="Networking.ProfileVXLAN"
	targetNamespace="urn:iControl"
	xmlns:tns="urn:iControl"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
	xmlns="http://schemas.xmlsoap.org/wsdl/">

<!-- types -->

<types>
	<xsd:schema targetNamespace='urn:iControl'
		xmlns='http://www.w3.org/2001/XMLSchema'
		xmlns:SOAP-ENC='http://schemas.xmlsoap.org/soap/encoding/'
		xmlns:wsdl='http://schemas.xmlsoap.org/wsdl/'>
		<xsd:complexType name="Networking.ProfileVXLAN.ProfileVXLANEncapsulationTypeSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Networking.ProfileVXLAN.ProfileVXLANEncapsulationType[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="Common.StringSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:string[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:simpleType name="Networking.ProfileVXLAN.VXLANFloodingType">
			<xsd:restriction base="xsd:string">
				<xsd:enumeration value="PROFILE_VXLAN_FLOODING_TYPE_UNKNOWN">
					<xsd:annotation>
						<xsd:documentation>PROFILE_VXLAN_FLOODING_TYPE_UNKNOWN</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="PROFILE_VXLAN_FLOODING_TYPE_NONE">
					<xsd:annotation>
						<xsd:documentation>PROFILE_VXLAN_FLOODING_TYPE_NONE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="PROFILE_VXLAN_FLOODING_TYPE_MULTICAST">
					<xsd:annotation>
						<xsd:documentation>PROFILE_VXLAN_FLOODING_TYPE_MULTICAST</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="PROFILE_VXLAN_FLOODING_TYPE_MULTIPOINT">
					<xsd:annotation>
						<xsd:documentation>PROFILE_VXLAN_FLOODING_TYPE_MULTIPOINT</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="PROFILE_VXLAN_FLOODING_TYPE_REPLICATOR">
					<xsd:annotation>
						<xsd:documentation>PROFILE_VXLAN_FLOODING_TYPE_REPLICATOR</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
			</xsd:restriction>
		</xsd:simpleType>
		<xsd:complexType name="Common.ProfilePortNumberSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Common.ProfilePortNumber[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="Common.BooleanSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:boolean[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="Networking.ProfileVXLAN.ProfileVXLANEncapsulationType">
			<xsd:sequence>
				<xsd:element name="value" type="tns:Networking.ProfileVXLAN.VXLANEncapsulationType"/>
				<xsd:element name="default_flag" type="xsd:boolean"/>
			</xsd:sequence>
		</xsd:complexType>
		<xsd:complexType name="Networking.ProfileVXLAN.ProfileVXLANFloodingType">
			<xsd:sequence>
				<xsd:element name="value" type="tns:Networking.ProfileVXLAN.VXLANFloodingType"/>
				<xsd:element name="default_flag" type="xsd:boolean"/>
			</xsd:sequence>
		</xsd:complexType>
		<xsd:simpleType name="Networking.ProfileVXLAN.VXLANEncapsulationType">
			<xsd:restriction base="xsd:string">
				<xsd:enumeration value="PROFILE_VXLAN_ENCAPSULATION_TYPE_UNKNOWN">
					<xsd:annotation>
						<xsd:documentation>PROFILE_VXLAN_ENCAPSULATION_TYPE_UNKNOWN</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="PROFILE_VXLAN_ENCAPSULATION_TYPE_VXLAN">
					<xsd:annotation>
						<xsd:documentation>PROFILE_VXLAN_ENCAPSULATION_TYPE_VXLAN</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="PROFILE_VXLAN_ENCAPSULATION_TYPE_VXLAN_GPE">
					<xsd:annotation>
						<xsd:documentation>PROFILE_VXLAN_ENCAPSULATION_TYPE_VXLAN_GPE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
			</xsd:restriction>
		</xsd:simpleType>
		<xsd:complexType name="Networking.ProfileVXLAN.ProfileVXLANFloodingTypeSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Networking.ProfileVXLAN.ProfileVXLANFloodingType[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="Common.ProfilePortNumber">
			<xsd:sequence>
				<xsd:element name="value" type="xsd:long"/>
				<xsd:element name="default_flag" type="xsd:boolean"/>
			</xsd:sequence>
		</xsd:complexType>
	</xsd:schema>
</types>

<!-- message -->

<message name="Networking.ProfileVXLAN.get_listRequest">
</message>
<message name="Networking.ProfileVXLAN.get_listResponse">
	<part name="return" type="tns:Common.StringSequence"/>
</message>

<message name="Networking.ProfileVXLAN.createRequest">
	<part name="profile_names" type="tns:Common.StringSequence"/>
</message>
<message name="Networking.ProfileVXLAN.createResponse">
</message>

<message name="Networking.ProfileVXLAN.delete_profileRequest">
	<part name="profile_names" type="tns:Common.StringSequence"/>
</message>
<message name="Networking.ProfileVXLAN.delete_profileResponse">
</message>

<message name="Networking.ProfileVXLAN.delete_all_profilesRequest">
</message>
<message name="Networking.ProfileVXLAN.delete_all_profilesResponse">
</message>

<message name="Networking.ProfileVXLAN.is_base_profileRequest">
	<part name="profile_names" type="tns:Common.StringSequence"/>
</message>
<message name="Networking.ProfileVXLAN.is_base_profileResponse">
	<part name="return" type="tns:Common.BooleanSequence"/>
</message>

<message name="Networking.ProfileVXLAN.is_system_profileRequest">
	<part name="profile_names" type="tns:Common.StringSequence"/>
</message>
<message name="Networking.ProfileVXLAN.is_system_profileResponse">
	<part name="return" type="tns:Common.BooleanSequence"/>
</message>

<message name="Networking.ProfileVXLAN.set_default_profileRequest">
	<part name="profile_names" type="tns:Common.StringSequence"/>
	<part name="defaults" type="tns:Common.StringSequence"/>
</message>
<message name="Networking.ProfileVXLAN.set_default_profileResponse">
</message>

<message name="Networking.ProfileVXLAN.get_default_profileRequest">
	<part name="profile_names" type="tns:Common.StringSequence"/>
</message>
<message name="Networking.ProfileVXLAN.get_default_profileResponse">
	<part name="return" type="tns:Common.StringSequence"/>
</message>

<message name="Networking.ProfileVXLAN.set_portRequest">
	<part name="profile_names" type="tns:Common.StringSequence"/>
	<part name="ports" type="tns:Common.ProfilePortNumberSequence"/>
</message>
<message name="Networking.ProfileVXLAN.set_portResponse">
</message>

<message name="Networking.ProfileVXLAN.get_portRequest">
	<part name="profile_names" type="tns:Common.StringSequence"/>
</message>
<message name="Networking.ProfileVXLAN.get_portResponse">
	<part name="return" type="tns:Common.ProfilePortNumberSequence"/>
</message>

<message name="Networking.ProfileVXLAN.set_descriptionRequest">
	<part name="profile_names" type="tns:Common.StringSequence"/>
	<part name="descriptions" type="tns:Common.StringSequence"/>
</message>
<message name="Networking.ProfileVXLAN.set_descriptionResponse">
</message>

<message name="Networking.ProfileVXLAN.get_descriptionRequest">
	<part name="profile_names" type="tns:Common.StringSequence"/>
</message>
<message name="Networking.ProfileVXLAN.get_descriptionResponse">
	<part name="return" type="tns:Common.StringSequence"/>
</message>

<message name="Networking.ProfileVXLAN.set_flooding_typeRequest">
	<part name="profile_names" type="tns:Common.StringSequence"/>
	<part name="flooding_types" type="tns:Networking.ProfileVXLAN.ProfileVXLANFloodingTypeSequence"/>
</message>
<message name="Networking.ProfileVXLAN.set_flooding_typeResponse">
</message>

<message name="Networking.ProfileVXLAN.get_flooding_typeRequest">
	<part name="profile_names" type="tns:Common.StringSequence"/>
</message>
<message name="Networking.ProfileVXLAN.get_flooding_typeResponse">
	<part name="return" type="tns:Networking.ProfileVXLAN.ProfileVXLANFloodingTypeSequence"/>
</message>

<message name="Networking.ProfileVXLAN.set_encapsulation_typeRequest">
	<part name="profile_names" type="tns:Common.StringSequence"/>
	<part name="encapsulation_types" type="tns:Networking.ProfileVXLAN.ProfileVXLANEncapsulationTypeSequence"/>
</message>
<message name="Networking.ProfileVXLAN.set_encapsulation_typeResponse">
</message>

<message name="Networking.ProfileVXLAN.get_encapsulation_typeRequest">
	<part name="profile_names" type="tns:Common.StringSequence"/>
</message>
<message name="Networking.ProfileVXLAN.get_encapsulation_typeResponse">
	<part name="return" type="tns:Networking.ProfileVXLAN.ProfileVXLANEncapsulationTypeSequence"/>
</message>

<message name="Networking.ProfileVXLAN.get_versionRequest">
</message>
<message name="Networking.ProfileVXLAN.get_versionResponse">
	<part name="return" type="xsd:string"/>
</message>

<!-- portType -->

<portType name="Networking.ProfileVXLANPortType">
	<operation name="get_list">
 	<documentation>
 Gets the names for all VXLAN tunnel profiles.

        	</documentation>
		<input message="tns:Networking.ProfileVXLAN.get_listRequest"/>
		<output message="tns:Networking.ProfileVXLAN.get_listResponse"/>
	</operation>
	<operation name="create">
	<documentation>
 Creates a set of VXLAN tunnel profiles.

        	</documentation>
		<input message="tns:Networking.ProfileVXLAN.createRequest"/>
		<output message="tns:Networking.ProfileVXLAN.createResponse"/>
	</operation>
	<operation name="delete_profile">
	<documentation>
 Deletes a set of VXLAN tunnel profiles.

        	</documentation>
		<input message="tns:Networking.ProfileVXLAN.delete_profileRequest"/>
		<output message="tns:Networking.ProfileVXLAN.delete_profileResponse"/>
	</operation>
	<operation name="delete_all_profiles">
	<documentation>
 Deletes all non-system VXLAN tunnel profiles.

        	</documentation>
		<input message="tns:Networking.ProfileVXLAN.delete_all_profilesRequest"/>
		<output message="tns:Networking.ProfileVXLAN.delete_all_profilesResponse"/>
	</operation>
	<operation name="is_base_profile">
	<documentation>
 Determines whether the specified VXLAN tunnel profiles are base
 profiles.  A base profile sits at the base of the profile's
 inheritance tree, supplying the defaults for every profile derived
 from it.  (See also is_system_profile).

        	</documentation>
		<input message="tns:Networking.ProfileVXLAN.is_base_profileRequest"/>
		<output message="tns:Networking.ProfileVXLAN.is_base_profileResponse"/>
	</operation>
	<operation name="is_system_profile">
	<documentation>
 Determines whether the specified VXLAN tunnel profiles are
 system profiles.  A system profile is a profile pre-configured on
 the system, ready for use.  Non-system profiles are profiles
 created or modified by a user.  Note that if a system profile is
 modified, it is no longer considered a system profile.  (See also
 is_base_profile).

        	</documentation>
		<input message="tns:Networking.ProfileVXLAN.is_system_profileRequest"/>
		<output message="tns:Networking.ProfileVXLAN.is_system_profileResponse"/>
	</operation>
	<operation name="set_default_profile">
	<documentation>
 Sets an existing VXLAN tunnel profile as the default profile from 
 which this set of VXLAN tunnel profiles inherits their unspecified 
 attribute values.

        	</documentation>
		<input message="tns:Networking.ProfileVXLAN.set_default_profileRequest"/>
		<output message="tns:Networking.ProfileVXLAN.set_default_profileResponse"/>
	</operation>
	<operation name="get_default_profile">
	<documentation>
 Gets the VXLAN tunnel profile that is assigned as the default 
 profile from which this set of VXLAN tunnel profiles inherits 
 its unspecified attribute values.

        	</documentation>
		<input message="tns:Networking.ProfileVXLAN.get_default_profileRequest"/>
		<output message="tns:Networking.ProfileVXLAN.get_default_profileResponse"/>
	</operation>
	<operation name="set_port">
	<documentation>
 Sets the local port for receiving VXLAN packets for a set of VXLAN 
 tunnel profiles.

        	</documentation>
		<input message="tns:Networking.ProfileVXLAN.set_portRequest"/>
		<output message="tns:Networking.ProfileVXLAN.set_portResponse"/>
	</operation>
	<operation name="get_port">
	<documentation>
 Gets the local port for receiving VXLAN packets for a set of VXLAN 
 tunnel profiles.

        	</documentation>
		<input message="tns:Networking.ProfileVXLAN.get_portRequest"/>
		<output message="tns:Networking.ProfileVXLAN.get_portResponse"/>
	</operation>
	<operation name="set_description">
	<documentation>
 Sets the description for a set of VXLAN tunnel profiles.

 This is an arbitrary field which can be used to describe the VXLAN
   tunnel profile.

        	</documentation>
		<input message="tns:Networking.ProfileVXLAN.set_descriptionRequest"/>
		<output message="tns:Networking.ProfileVXLAN.set_descriptionResponse"/>
	</operation>
	<operation name="get_description">
	<documentation>
 Gets the descriptions for a set of VXLAN tunnel profiles.

        	</documentation>
		<input message="tns:Networking.ProfileVXLAN.get_descriptionRequest"/>
		<output message="tns:Networking.ProfileVXLAN.get_descriptionResponse"/>
	</operation>
	<operation name="set_flooding_type">
	<documentation>
 Sets the flooding type to use to transmit multicast, broadcast and
 unknown destination frames. The default is
 PROFILE_VXLAN_FLOODING_TYPE_MULTICAST.

        	</documentation>
		<input message="tns:Networking.ProfileVXLAN.set_flooding_typeRequest"/>
		<output message="tns:Networking.ProfileVXLAN.set_flooding_typeResponse"/>
	</operation>
	<operation name="get_flooding_type">
	<documentation>
 Gets the flooding type for the specified VXLAN profiles.

        	</documentation>
		<input message="tns:Networking.ProfileVXLAN.get_flooding_typeRequest"/>
		<output message="tns:Networking.ProfileVXLAN.get_flooding_typeResponse"/>
	</operation>
	<operation name="set_encapsulation_type">
	<documentation>
 Sets the encapsulation type to use to transmit multicast, broadcast and
 unknown destination frames. The default is
 PROFILE_VXLAN_ENCAPSULATION_TYPE_VXLAN.

        	</documentation>
		<input message="tns:Networking.ProfileVXLAN.set_encapsulation_typeRequest"/>
		<output message="tns:Networking.ProfileVXLAN.set_encapsulation_typeResponse"/>
	</operation>
	<operation name="get_encapsulation_type">
	<documentation>
 Gets the encapsulation type for the specified VXLAN profiles.

        	</documentation>
		<input message="tns:Networking.ProfileVXLAN.get_encapsulation_typeRequest"/>
		<output message="tns:Networking.ProfileVXLAN.get_encapsulation_typeResponse"/>
	</operation>
	<operation name="get_version">
	<documentation>
 Gets the version information for this interface.

        	</documentation>
		<input message="tns:Networking.ProfileVXLAN.get_versionRequest"/>
		<output message="tns:Networking.ProfileVXLAN.get_versionResponse"/>
	</operation>
</portType>

<!-- binding -->

<binding name="Networking.ProfileVXLANBinding" type="tns:Networking.ProfileVXLANPortType">
	<soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
	<operation name="get_list">
	<documentation>
 Gets the names for all VXLAN tunnel profiles.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Networking/ProfileVXLAN"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="create">
	<documentation>
 Creates a set of VXLAN tunnel profiles.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Networking/ProfileVXLAN"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="delete_profile">
	<documentation>
 Deletes a set of VXLAN tunnel profiles.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Networking/ProfileVXLAN"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="delete_all_profiles">
	<documentation>
 Deletes all non-system VXLAN tunnel profiles.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Networking/ProfileVXLAN"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="is_base_profile">
	<documentation>
 Determines whether the specified VXLAN tunnel profiles are base
 profiles.  A base profile sits at the base of the profile's
 inheritance tree, supplying the defaults for every profile derived
 from it.  (See also is_system_profile).

        	</documentation>
		<soap:operation soapAction="urn:iControl:Networking/ProfileVXLAN"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="is_system_profile">
	<documentation>
 Determines whether the specified VXLAN tunnel profiles are
 system profiles.  A system profile is a profile pre-configured on
 the system, ready for use.  Non-system profiles are profiles
 created or modified by a user.  Note that if a system profile is
 modified, it is no longer considered a system profile.  (See also
 is_base_profile).

        	</documentation>
		<soap:operation soapAction="urn:iControl:Networking/ProfileVXLAN"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_default_profile">
	<documentation>
 Sets an existing VXLAN tunnel profile as the default profile from 
 which this set of VXLAN tunnel profiles inherits their unspecified 
 attribute values.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Networking/ProfileVXLAN"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_default_profile">
	<documentation>
 Gets the VXLAN tunnel profile that is assigned as the default 
 profile from which this set of VXLAN tunnel profiles inherits 
 its unspecified attribute values.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Networking/ProfileVXLAN"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_port">
	<documentation>
 Sets the local port for receiving VXLAN packets for a set of VXLAN 
 tunnel profiles.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Networking/ProfileVXLAN"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_port">
	<documentation>
 Gets the local port for receiving VXLAN packets for a set of VXLAN 
 tunnel profiles.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Networking/ProfileVXLAN"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_description">
	<documentation>
 Sets the description for a set of VXLAN tunnel profiles.

 This is an arbitrary field which can be used to describe the VXLAN
   tunnel profile.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Networking/ProfileVXLAN"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_description">
	<documentation>
 Gets the descriptions for a set of VXLAN tunnel profiles.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Networking/ProfileVXLAN"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_flooding_type">
	<documentation>
 Sets the flooding type to use to transmit multicast, broadcast and
 unknown destination frames. The default is
 PROFILE_VXLAN_FLOODING_TYPE_MULTICAST.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Networking/ProfileVXLAN"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_flooding_type">
	<documentation>
 Gets the flooding type for the specified VXLAN profiles.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Networking/ProfileVXLAN"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_encapsulation_type">
	<documentation>
 Sets the encapsulation type to use to transmit multicast, broadcast and
 unknown destination frames. The default is
 PROFILE_VXLAN_ENCAPSULATION_TYPE_VXLAN.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Networking/ProfileVXLAN"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_encapsulation_type">
	<documentation>
 Gets the encapsulation type for the specified VXLAN profiles.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Networking/ProfileVXLAN"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_version">
	<documentation>
 Gets the version information for this interface.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Networking/ProfileVXLAN"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Networking/ProfileVXLAN"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>
</binding>

<!-- service -->

<service name="Networking.ProfileVXLAN">
	<documentation>
 The ProfileVXLAN interface allows you to manipulate a VXLAN tunnel
 profile to configure a VXLAN gateway.  A VXLAN gateway provides the 
 ability to bridge between a traditional VLAN and a VXLAN or NVGRE 
 network.

        	</documentation>
	<port name="Networking.ProfileVXLANPort" binding="tns:Networking.ProfileVXLANBinding">
		<soap:address location="https://url_to_service"/>
	</port>
</service>
</definitions>
