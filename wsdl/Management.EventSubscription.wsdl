<?xml version="1.0" ?>
<!--
Copyright (c) 1996-2018, F5 Networks, Inc., Seattle, Washington. All rights reserved.  

F5, F5 Networks, the F5 logo, BIG-IP, 3-DNS, iControl, GLOBAL-SITE, SEE-IT, EDGE-FX, FireGuard, Internet Control Architecture, IP Application Switch, iRules, PACKET VELOCITY, SYN Check, CONTROL YOUR WORLD, OneConnect, ZoneRunner, uRoam, FirePass, and TrafficShield are registered trademarks or trademarks of F5 Networks, Inc., in the U.S. and certain other countries. 

All other trademarks mentioned in this document are the property of their respective owners. F5 Networks' trademarks may not be used in connection with any product or service except as permitted in writing by F5.

-->
<definitions name="Management.EventSubscription"
	targetNamespace="urn:iControl"
	xmlns:tns="urn:iControl"
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
	xmlns="http://schemas.xmlsoap.org/wsdl/">

<!-- types -->

<types>
	<xsd:schema targetNamespace='urn:iControl'
		xmlns='http://www.w3.org/2001/XMLSchema'
		xmlns:SOAP-ENC='http://schemas.xmlsoap.org/soap/encoding/'
		xmlns:wsdl='http://schemas.xmlsoap.org/wsdl/'>
		<xsd:complexType name="Management.EventSubscription.SubscriptionStatisticsSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Management.EventSubscription.SubscriptionStatistics[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="Management.EventSubscription.SubscriptionDefinitionSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Management.EventSubscription.SubscriptionDefinition[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:simpleType name="Management.EventSubscription.SubscriptionStatusCode">
			<xsd:restriction base="xsd:string">
				<xsd:enumeration value="E_OK">
					<xsd:annotation>
						<xsd:documentation>E_OK</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="E_GENERAL_ERROR">
					<xsd:annotation>
						<xsd:documentation>E_GENERAL_ERROR</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="E_INVALID_EVENT_TYPE">
					<xsd:annotation>
						<xsd:documentation>E_INVALID_EVENT_TYPE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="E_INVALID_ID">
					<xsd:annotation>
						<xsd:documentation>E_INVALID_ID</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="E_INVALID_URL">
					<xsd:annotation>
						<xsd:documentation>E_INVALID_URL</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="E_INVALID_USERNAME">
					<xsd:annotation>
						<xsd:documentation>E_INVALID_USERNAME</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="E_INVALID_PASSWORD">
					<xsd:annotation>
						<xsd:documentation>E_INVALID_PASSWORD</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="E_INVALID_TTL">
					<xsd:annotation>
						<xsd:documentation>E_INVALID_TTL</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="E_INVALID_MIN_EVENTS_PER_TIMESLICE">
					<xsd:annotation>
						<xsd:documentation>E_INVALID_MIN_EVENTS_PER_TIMESLICE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="E_INVALID_MAX_TIMESLICE">
					<xsd:annotation>
						<xsd:documentation>E_INVALID_MAX_TIMESLICE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="E_INVALID_ENABLED_STATE">
					<xsd:annotation>
						<xsd:documentation>E_INVALID_ENABLED_STATE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="E_CONNECTION_REFUSED">
					<xsd:annotation>
						<xsd:documentation>E_CONNECTION_REFUSED</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="E_CONNECTION_TIMEDOUT">
					<xsd:annotation>
						<xsd:documentation>E_CONNECTION_TIMEDOUT</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
			</xsd:restriction>
		</xsd:simpleType>
		<xsd:simpleType name="Common.EnabledState">
			<xsd:restriction base="xsd:string">
				<xsd:enumeration value="STATE_DISABLED">
					<xsd:annotation>
						<xsd:documentation>STATE_DISABLED</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="STATE_ENABLED">
					<xsd:annotation>
						<xsd:documentation>STATE_ENABLED</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
			</xsd:restriction>
		</xsd:simpleType>
		<xsd:complexType name="Common.TimeStamp">
			<xsd:sequence>
				<xsd:element name="year" type="xsd:long"/>
				<xsd:element name="month" type="xsd:long"/>
				<xsd:element name="day" type="xsd:long"/>
				<xsd:element name="hour" type="xsd:long"/>
				<xsd:element name="minute" type="xsd:long"/>
				<xsd:element name="second" type="xsd:long"/>
			</xsd:sequence>
		</xsd:complexType>
		<xsd:complexType name="Management.EventSubscription.SubscriptionDefinition">
			<xsd:sequence>
				<xsd:element name="id" type="xsd:string"/>
				<xsd:element name="details" type="tns:Management.EventSubscription.SubscriptionDetails"/>
			</xsd:sequence>
		</xsd:complexType>
		<xsd:complexType name="Common.StringSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:string[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:simpleType name="Management.EventSubscription.EventType">
			<xsd:restriction base="xsd:string">
				<xsd:enumeration value="EVENTTYPE_NONE">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_NONE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_TEST">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_TEST</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_ALL">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_ALL</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_SYSTEM_STARTUP">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_SYSTEM_STARTUP</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_SYSTEM_SHUTDOWN">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_SYSTEM_SHUTDOWN</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_SYSTEM_CONFIG_LOAD">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_SYSTEM_CONFIG_LOAD</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_CREATE">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_CREATE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_MODIFY">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_MODIFY</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_DELETE">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_DELETE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_ADMIN_IP">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_ADMIN_IP</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_ARP_ENTRY">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_ARP_ENTRY</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_DAEMON_HA">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_DAEMON_HA</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_DB_VARIABLE">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_DB_VARIABLE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_FEATURE_FLAGS">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_FEATURE_FLAGS</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_FILTER_PROFILE">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_FILTER_PROFILE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_GTMD">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_GTMD</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_INTERFACE">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_INTERFACE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_LCDWARN">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_LCDWARN</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_L2_FORWARD">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_L2_FORWARD</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_MIRROR_PORT_MEMBER">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_MIRROR_PORT_MEMBER</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_MIRROR_PORT">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_MIRROR_PORT</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_MIRROR_VLAN">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_MIRROR_VLAN</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_MONITOR">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_MONITOR</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_NAT">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_NAT</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_NODE_ADDRESS">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_NODE_ADDRESS</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_PACKET_FILTER">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_PACKET_FILTER</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_PCI_DEVICE">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_PCI_DEVICE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_POOL">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_POOL</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_POOL_MEMBER">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_POOL_MEMBER</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_RATE_FILTER">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_RATE_FILTER</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_ROUTE_MGMT">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_ROUTE_MGMT</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_ROUTE_UPDATE">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_ROUTE_UPDATE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_RULE">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_RULE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_SELF_IP">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_SELF_IP</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_SENSOR">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_SENSOR</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_SNAT_ADDRESS">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_SNAT_ADDRESS</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_SNAT_POOL">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_SNAT_POOL</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_SNAT_POOL_MEMBER">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_SNAT_POOL_MEMBER</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_STP">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_STP</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_SWITCH_DOMAIN">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_SWITCH_DOMAIN</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_SWITCH_EDGE">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_SWITCH_EDGE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_TAMD_AUTH">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_TAMD_AUTH</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_TRUNK">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_TRUNK</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_TRUNK_CONFIG_MEMBER">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_TRUNK_CONFIG_MEMBER</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_TRUNK_WORKING_MEMBER">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_TRUNK_WORKING_MEMBER</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_VALUE_LIST">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_VALUE_LIST</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_VIRTUAL_ADDRESS">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_VIRTUAL_ADDRESS</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_VIRTUAL_SERVER">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_VIRTUAL_SERVER</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_VIRTUAL_SERVER_PROFILE">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_VIRTUAL_SERVER_PROFILE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_VLAN">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_VLAN</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_VLAN_MEMBER">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_VLAN_MEMBER</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="EVENTTYPE_VLANGROUP">
					<xsd:annotation>
						<xsd:documentation>EVENTTYPE_VLANGROUP</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
			</xsd:restriction>
		</xsd:simpleType>
		<xsd:complexType name="Management.EventSubscription.SubscriptionStatus">
			<xsd:sequence>
				<xsd:element name="code" type="tns:Management.EventSubscription.SubscriptionStatusCode"/>
				<xsd:element name="data" type="xsd:string"/>
			</xsd:sequence>
		</xsd:complexType>
		<xsd:complexType name="Management.EventSubscription.SubscriptionStatusSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Management.EventSubscription.SubscriptionStatus[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="Management.EventSubscription.SubscriptionDetailsV2">
			<xsd:sequence>
				<xsd:element name="name" type="xsd:string"/>
				<xsd:element name="event_type_list" type="tns:Management.EventSubscription.EventTypeSequence"/>
				<xsd:element name="url" type="xsd:string"/>
				<xsd:element name="url_credentials" type="tns:Management.EventSubscription.UserCredential"/>
				<xsd:element name="ttl" type="xsd:long"/>
				<xsd:element name="min_events_per_timeslice" type="xsd:long"/>
				<xsd:element name="max_timeslice" type="xsd:long"/>
				<xsd:element name="enabled_state" type="tns:Common.EnabledState"/>
				<xsd:element name="proxy_url" type="xsd:string"/>
			</xsd:sequence>
		</xsd:complexType>
		<xsd:complexType name="Management.EventSubscription.UserCredentialSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Management.EventSubscription.UserCredential[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="Management.EventSubscription.UserCredential">
			<xsd:sequence>
				<xsd:element name="auth_mode" type="tns:Management.EventSubscription.AuthenticationMode"/>
				<xsd:element name="username" type="xsd:string"/>
				<xsd:element name="password" type="xsd:string"/>
			</xsd:sequence>
		</xsd:complexType>
		<xsd:complexType name="Management.EventSubscription.SubscriptionDefinitionV2Sequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Management.EventSubscription.SubscriptionDefinitionV2[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="Management.EventSubscription.SubscriptionDefinitionV2">
			<xsd:sequence>
				<xsd:element name="id" type="xsd:string"/>
				<xsd:element name="details" type="tns:Management.EventSubscription.SubscriptionDetailsV2"/>
			</xsd:sequence>
		</xsd:complexType>
		<xsd:complexType name="Common.LongSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='xsd:long[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:simpleType name="Management.EventSubscription.AuthenticationMode">
			<xsd:restriction base="xsd:string">
				<xsd:enumeration value="AUTHMODE_NONE">
					<xsd:annotation>
						<xsd:documentation>AUTHMODE_NONE</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
				<xsd:enumeration value="AUTHMODE_BASIC">
					<xsd:annotation>
						<xsd:documentation>AUTHMODE_BASIC</xsd:documentation>
					</xsd:annotation>
				</xsd:enumeration>
			</xsd:restriction>
		</xsd:simpleType>
		<xsd:complexType name="Management.EventSubscription.EventTypeSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Management.EventSubscription.EventType[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="Management.EventSubscription.SubscriptionDetails">
			<xsd:sequence>
				<xsd:element name="name" type="xsd:string"/>
				<xsd:element name="event_type_list" type="tns:Management.EventSubscription.EventTypeSequence"/>
				<xsd:element name="url" type="xsd:string"/>
				<xsd:element name="url_credentials" type="tns:Management.EventSubscription.UserCredential"/>
				<xsd:element name="ttl" type="xsd:long"/>
				<xsd:element name="min_events_per_timeslice" type="xsd:long"/>
				<xsd:element name="max_timeslice" type="xsd:long"/>
				<xsd:element name="enabled_state" type="tns:Common.EnabledState"/>
			</xsd:sequence>
		</xsd:complexType>
		<xsd:complexType name="Management.EventSubscription.SubscriptionDetailsV2Sequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Management.EventSubscription.SubscriptionDetailsV2[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="Management.EventSubscription.SubscriptionDetailsSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Management.EventSubscription.SubscriptionDetails[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
		<xsd:complexType name="Management.EventSubscription.SubscriptionStatistics">
			<xsd:sequence>
				<xsd:element name="id" type="xsd:string"/>
				<xsd:element name="time_created" type="tns:Common.TimeStamp"/>
				<xsd:element name="time_last_modified" type="tns:Common.TimeStamp"/>
				<xsd:element name="time_last_notified" type="tns:Common.TimeStamp"/>
				<xsd:element name="notifications_sent" type="xsd:long"/>
				<xsd:element name="last_status" type="tns:Management.EventSubscription.SubscriptionStatus"/>
			</xsd:sequence>
		</xsd:complexType>
		<xsd:complexType name="Common.EnabledStateSequence">
			<xsd:complexContent>
				<xsd:restriction base='SOAP-ENC:Array'>
					<xsd:attribute ref='SOAP-ENC:arrayType' wsdl:arrayType='tns:Common.EnabledState[]'/>
				</xsd:restriction>
			</xsd:complexContent>
		</xsd:complexType>
	</xsd:schema>
</types>

<!-- message -->

<message name="Management.EventSubscription.createRequest">
	<part name="sub_detail_list" type="tns:Management.EventSubscription.SubscriptionDetailsSequence"/>
</message>
<message name="Management.EventSubscription.createResponse">
	<part name="return" type="tns:Management.EventSubscription.SubscriptionStatusSequence"/>
</message>

<message name="Management.EventSubscription.create_v2Request">
	<part name="sub_detail_list" type="tns:Management.EventSubscription.SubscriptionDetailsV2Sequence"/>
</message>
<message name="Management.EventSubscription.create_v2Response">
	<part name="return" type="tns:Management.EventSubscription.SubscriptionStatusSequence"/>
</message>

<message name="Management.EventSubscription.modifyRequest">
	<part name="sub_def_list" type="tns:Management.EventSubscription.SubscriptionDefinitionSequence"/>
</message>
<message name="Management.EventSubscription.modifyResponse">
	<part name="return" type="tns:Management.EventSubscription.SubscriptionStatusSequence"/>
</message>

<message name="Management.EventSubscription.modify_v2Request">
	<part name="sub_def_list" type="tns:Management.EventSubscription.SubscriptionDefinitionV2Sequence"/>
</message>
<message name="Management.EventSubscription.modify_v2Response">
	<part name="return" type="tns:Management.EventSubscription.SubscriptionStatusSequence"/>
</message>

<message name="Management.EventSubscription.removeRequest">
	<part name="id_list" type="tns:Common.StringSequence"/>
</message>
<message name="Management.EventSubscription.removeResponse">
	<part name="return" type="tns:Management.EventSubscription.SubscriptionStatusSequence"/>
</message>

<message name="Management.EventSubscription.get_listRequest">
</message>
<message name="Management.EventSubscription.get_listResponse">
	<part name="return" type="tns:Common.StringSequence"/>
</message>

<message name="Management.EventSubscription.queryRequest">
	<part name="id_list" type="tns:Common.StringSequence"/>
</message>
<message name="Management.EventSubscription.queryResponse">
	<part name="return" type="tns:Management.EventSubscription.SubscriptionStatusSequence"/>
	<part name="sub_def_list" type="tns:Management.EventSubscription.SubscriptionDefinitionSequence"/>
</message>

<message name="Management.EventSubscription.query_v2Request">
	<part name="id_list" type="tns:Common.StringSequence"/>
</message>
<message name="Management.EventSubscription.query_v2Response">
	<part name="return" type="tns:Management.EventSubscription.SubscriptionStatusSequence"/>
	<part name="sub_def_list" type="tns:Management.EventSubscription.SubscriptionDefinitionV2Sequence"/>
</message>

<message name="Management.EventSubscription.get_available_event_typesRequest">
</message>
<message name="Management.EventSubscription.get_available_event_typesResponse">
	<part name="return" type="tns:Management.EventSubscription.EventTypeSequence"/>
</message>

<message name="Management.EventSubscription.set_stateRequest">
	<part name="id_list" type="tns:Common.StringSequence"/>
	<part name="state_list" type="tns:Common.EnabledStateSequence"/>
</message>
<message name="Management.EventSubscription.set_stateResponse">
	<part name="return" type="tns:Management.EventSubscription.SubscriptionStatusSequence"/>
</message>

<message name="Management.EventSubscription.get_stateRequest">
	<part name="id_list" type="tns:Common.StringSequence"/>
</message>
<message name="Management.EventSubscription.get_stateResponse">
	<part name="return" type="tns:Management.EventSubscription.SubscriptionStatusSequence"/>
	<part name="state_list" type="tns:Common.EnabledStateSequence"/>
</message>

<message name="Management.EventSubscription.set_urlRequest">
	<part name="id_list" type="tns:Common.StringSequence"/>
	<part name="url_list" type="tns:Common.StringSequence"/>
</message>
<message name="Management.EventSubscription.set_urlResponse">
	<part name="return" type="tns:Management.EventSubscription.SubscriptionStatusSequence"/>
</message>

<message name="Management.EventSubscription.get_urlRequest">
	<part name="id_list" type="tns:Common.StringSequence"/>
</message>
<message name="Management.EventSubscription.get_urlResponse">
	<part name="return" type="tns:Management.EventSubscription.SubscriptionStatusSequence"/>
	<part name="url_list" type="tns:Common.StringSequence"/>
</message>

<message name="Management.EventSubscription.set_authenticationRequest">
	<part name="id_list" type="tns:Common.StringSequence"/>
	<part name="credential_list" type="tns:Management.EventSubscription.UserCredentialSequence"/>
</message>
<message name="Management.EventSubscription.set_authenticationResponse">
	<part name="return" type="tns:Management.EventSubscription.SubscriptionStatusSequence"/>
</message>

<message name="Management.EventSubscription.get_authenticationRequest">
	<part name="id_list" type="tns:Common.StringSequence"/>
</message>
<message name="Management.EventSubscription.get_authenticationResponse">
	<part name="return" type="tns:Management.EventSubscription.SubscriptionStatusSequence"/>
	<part name="credential_list" type="tns:Management.EventSubscription.UserCredentialSequence"/>
</message>

<message name="Management.EventSubscription.set_ttlRequest">
	<part name="id_list" type="tns:Common.StringSequence"/>
	<part name="ttl_list" type="tns:Common.LongSequence"/>
</message>
<message name="Management.EventSubscription.set_ttlResponse">
	<part name="return" type="tns:Management.EventSubscription.SubscriptionStatusSequence"/>
</message>

<message name="Management.EventSubscription.get_ttlRequest">
	<part name="id_list" type="tns:Common.StringSequence"/>
</message>
<message name="Management.EventSubscription.get_ttlResponse">
	<part name="return" type="tns:Management.EventSubscription.SubscriptionStatusSequence"/>
	<part name="ttl_list" type="tns:Common.LongSequence"/>
</message>

<message name="Management.EventSubscription.set_min_events_per_timesliceRequest">
	<part name="id_list" type="tns:Common.StringSequence"/>
	<part name="min_events_list" type="tns:Common.LongSequence"/>
</message>
<message name="Management.EventSubscription.set_min_events_per_timesliceResponse">
	<part name="return" type="tns:Management.EventSubscription.SubscriptionStatusSequence"/>
</message>

<message name="Management.EventSubscription.get_min_events_per_timesliceRequest">
	<part name="id_list" type="tns:Common.StringSequence"/>
</message>
<message name="Management.EventSubscription.get_min_events_per_timesliceResponse">
	<part name="return" type="tns:Management.EventSubscription.SubscriptionStatusSequence"/>
	<part name="min_events_list" type="tns:Common.LongSequence"/>
</message>

<message name="Management.EventSubscription.set_max_timesliceRequest">
	<part name="id_list" type="tns:Common.StringSequence"/>
	<part name="max_timeslice_list" type="tns:Common.LongSequence"/>
</message>
<message name="Management.EventSubscription.set_max_timesliceResponse">
	<part name="return" type="tns:Management.EventSubscription.SubscriptionStatusSequence"/>
</message>

<message name="Management.EventSubscription.get_max_timesliceRequest">
	<part name="id_list" type="tns:Common.StringSequence"/>
</message>
<message name="Management.EventSubscription.get_max_timesliceResponse">
	<part name="return" type="tns:Management.EventSubscription.SubscriptionStatusSequence"/>
	<part name="max_timeslice_list" type="tns:Common.LongSequence"/>
</message>

<message name="Management.EventSubscription.set_proxy_urlRequest">
	<part name="id_list" type="tns:Common.StringSequence"/>
	<part name="proxies" type="tns:Common.StringSequence"/>
</message>
<message name="Management.EventSubscription.set_proxy_urlResponse">
	<part name="return" type="tns:Management.EventSubscription.SubscriptionStatusSequence"/>
</message>

<message name="Management.EventSubscription.get_proxy_urlRequest">
	<part name="id_list" type="tns:Common.StringSequence"/>
</message>
<message name="Management.EventSubscription.get_proxy_urlResponse">
	<part name="return" type="tns:Management.EventSubscription.SubscriptionStatusSequence"/>
	<part name="proxies" type="tns:Common.StringSequence"/>
</message>

<message name="Management.EventSubscription.get_statisticsRequest">
	<part name="id_list" type="tns:Common.StringSequence"/>
</message>
<message name="Management.EventSubscription.get_statisticsResponse">
	<part name="return" type="tns:Management.EventSubscription.SubscriptionStatusSequence"/>
	<part name="statistics_list" type="tns:Management.EventSubscription.SubscriptionStatisticsSequence"/>
</message>

<message name="Management.EventSubscription.reset_statisticsRequest">
	<part name="id_list" type="tns:Common.StringSequence"/>
</message>
<message name="Management.EventSubscription.reset_statisticsResponse">
	<part name="return" type="tns:Management.EventSubscription.SubscriptionStatusSequence"/>
</message>

<message name="Management.EventSubscription.pingRequest">
</message>
<message name="Management.EventSubscription.pingResponse">
	<part name="return" type="tns:Management.EventSubscription.SubscriptionStatus"/>
</message>

<message name="Management.EventSubscription.get_versionRequest">
</message>
<message name="Management.EventSubscription.get_versionResponse">
	<part name="return" type="xsd:string"/>
</message>

<!-- portType -->

<portType name="Management.EventSubscriptionPortType">
	<operation name="create">
    	<documentation>
 Create a new subscription.  This takes an an input a list of subscription details, one for each subscription requested.

        	</documentation>
		<input message="tns:Management.EventSubscription.createRequest"/>
		<output message="tns:Management.EventSubscription.createResponse"/>
	</operation>
	<operation name="create_v2">
	<documentation>
 Create a new subscription.  This takes an an input a list of
 subscription details, one for each subscription requested.

        	</documentation>
		<input message="tns:Management.EventSubscription.create_v2Request"/>
		<output message="tns:Management.EventSubscription.create_v2Response"/>
	</operation>
	<operation name="modify">
	<documentation>
 Modify a list of subscriptions.  This takes a list of subscription definitions representing the subscriptions that are
 to be modified.

        	</documentation>
		<input message="tns:Management.EventSubscription.modifyRequest"/>
		<output message="tns:Management.EventSubscription.modifyResponse"/>
	</operation>
	<operation name="modify_v2">
	<documentation>
 Modify a list of subscriptions.  This takes a list of subscription
 definitions representing the subscriptions that are to be modified.

        	</documentation>
		<input message="tns:Management.EventSubscription.modify_v2Request"/>
		<output message="tns:Management.EventSubscription.modify_v2Response"/>
	</operation>
	<operation name="remove">
	<documentation>
 Remove a list of subscriptions.  This takes as input a list of subscription id's and returns a list of status
 structures with the associated status code for each item in the id_list.

        	</documentation>
		<input message="tns:Management.EventSubscription.removeRequest"/>
		<output message="tns:Management.EventSubscription.removeResponse"/>
	</operation>
	<operation name="get_list">
	<documentation>
 Retrieve the list of configured subscription identifiers.

        	</documentation>
		<input message="tns:Management.EventSubscription.get_listRequest"/>
		<output message="tns:Management.EventSubscription.get_listResponse"/>
	</operation>
	<operation name="query">
	<documentation>
 Retrieve the subscription definitions for a list of subscription identifiers.

        	</documentation>
		<input message="tns:Management.EventSubscription.queryRequest"/>
		<output message="tns:Management.EventSubscription.queryResponse"/>
	</operation>
	<operation name="query_v2">
	<documentation>
 Retrieve the subscription definitions for a list of subscription
 identifiers.

        	</documentation>
		<input message="tns:Management.EventSubscription.query_v2Request"/>
		<output message="tns:Management.EventSubscription.query_v2Response"/>
	</operation>
	<operation name="get_available_event_types">
	<documentation>
 Retrieve a list of event types available on this system.

        	</documentation>
		<input message="tns:Management.EventSubscription.get_available_event_typesRequest"/>
		<output message="tns:Management.EventSubscription.get_available_event_typesResponse"/>
	</operation>
	<operation name="set_state">
	<documentation>
 Set the enabled state of a list of subscriptions identifiers

        	</documentation>
		<input message="tns:Management.EventSubscription.set_stateRequest"/>
		<output message="tns:Management.EventSubscription.set_stateResponse"/>
	</operation>
	<operation name="get_state">
	<documentation>
 Get the enabled state of a list of subscription identifiers.

        	</documentation>
		<input message="tns:Management.EventSubscription.get_stateRequest"/>
		<output message="tns:Management.EventSubscription.get_stateResponse"/>
	</operation>
	<operation name="set_url">
	<documentation>
 Set the url endpoint that implements the EventNotification interface.

        	</documentation>
		<input message="tns:Management.EventSubscription.set_urlRequest"/>
		<output message="tns:Management.EventSubscription.set_urlResponse"/>
	</operation>
	<operation name="get_url">
	<documentation>
 Get the url endpoint that implements the EventNotification interface.

        	</documentation>
		<input message="tns:Management.EventSubscription.get_urlRequest"/>
		<output message="tns:Management.EventSubscription.get_urlResponse"/>
	</operation>
	<operation name="set_authentication">
	<documentation>
 Set the credentials for the url's associated with the given list of subscription identifiers.

        	</documentation>
		<input message="tns:Management.EventSubscription.set_authenticationRequest"/>
		<output message="tns:Management.EventSubscription.set_authenticationResponse"/>
	</operation>
	<operation name="get_authentication">
	<documentation>
 Gets the credentials for the URL's associated with a set of
 subscription identifiers.

        	</documentation>
		<input message="tns:Management.EventSubscription.get_authenticationRequest"/>
		<output message="tns:Management.EventSubscription.get_authenticationResponse"/>
	</operation>
	<operation name="set_ttl">
	<documentation>
 Set the time to live (ttl) in seconds for the list of subscription identifiers. 

        	</documentation>
		<input message="tns:Management.EventSubscription.set_ttlRequest"/>
		<output message="tns:Management.EventSubscription.set_ttlResponse"/>
	</operation>
	<operation name="get_ttl">
	<documentation>
 Get the time to live (ttl) in seconds for the list of subscription identifiers.

        	</documentation>
		<input message="tns:Management.EventSubscription.get_ttlRequest"/>
		<output message="tns:Management.EventSubscription.get_ttlResponse"/>
	</operation>
	<operation name="set_min_events_per_timeslice">
	<documentation>
 Set the minimum number of events needed to trigger a notification message.
This value is used to force a notification message to occur even if the 
max timeslice attribute is not reached yet.

        	</documentation>
		<input message="tns:Management.EventSubscription.set_min_events_per_timesliceRequest"/>
		<output message="tns:Management.EventSubscription.set_min_events_per_timesliceResponse"/>
	</operation>
	<operation name="get_min_events_per_timeslice">
	<documentation>
 Get the minimum number of events needed to trigger a notification message.

        	</documentation>
		<input message="tns:Management.EventSubscription.get_min_events_per_timesliceRequest"/>
		<output message="tns:Management.EventSubscription.get_min_events_per_timesliceResponse"/>
	</operation>
	<operation name="set_max_timeslice">
	<documentation>
 Set the maximum timeslice (in seconds) between event notifications.  This value is used
to ensure that notifications are sent despite the minimum event attribute not reaching
its threashold.

        	</documentation>
		<input message="tns:Management.EventSubscription.set_max_timesliceRequest"/>
		<output message="tns:Management.EventSubscription.set_max_timesliceResponse"/>
	</operation>
	<operation name="get_max_timeslice">
	<documentation>
 Get the maximum timeslice (in seconds) between event notifications for the list of subscription identifiers.

        	</documentation>
		<input message="tns:Management.EventSubscription.get_max_timesliceRequest"/>
		<output message="tns:Management.EventSubscription.get_max_timesliceResponse"/>
	</operation>
	<operation name="set_proxy_url">
	<documentation>
 Sets the proxy URL required for accessing the notification service
 for a set of subscriptions.

        	</documentation>
		<input message="tns:Management.EventSubscription.set_proxy_urlRequest"/>
		<output message="tns:Management.EventSubscription.set_proxy_urlResponse"/>
	</operation>
	<operation name="get_proxy_url">
	<documentation>
 Gets the proxy URL required for accessing the notification service
 for a set of subscriptions.

        	</documentation>
		<input message="tns:Management.EventSubscription.get_proxy_urlRequest"/>
		<output message="tns:Management.EventSubscription.get_proxy_urlResponse"/>
	</operation>
	<operation name="get_statistics">
	<documentation>
 Get the statistics for the given list of subscription identifiers.

        	</documentation>
		<input message="tns:Management.EventSubscription.get_statisticsRequest"/>
		<output message="tns:Management.EventSubscription.get_statisticsResponse"/>
	</operation>
	<operation name="reset_statistics">
	<documentation>
 Reset the statistics for the given list of subscription identifiers.

        	</documentation>
		<input message="tns:Management.EventSubscription.reset_statisticsRequest"/>
		<output message="tns:Management.EventSubscription.reset_statisticsResponse"/>
	</operation>
	<operation name="ping">
	<documentation>
 A lightweight ping to determine the event notification service's health.

        	</documentation>
		<input message="tns:Management.EventSubscription.pingRequest"/>
		<output message="tns:Management.EventSubscription.pingResponse"/>
	</operation>
	<operation name="get_version">
	<documentation>
 Gets the version information for this interface.

        	</documentation>
		<input message="tns:Management.EventSubscription.get_versionRequest"/>
		<output message="tns:Management.EventSubscription.get_versionResponse"/>
	</operation>
</portType>

<!-- binding -->

<binding name="Management.EventSubscriptionBinding" type="tns:Management.EventSubscriptionPortType">
	<soap:binding style="rpc" transport="http://schemas.xmlsoap.org/soap/http"/>
	<operation name="create">
	<documentation>
 Create a new subscription.  This takes an an input a list of subscription details, one for each subscription requested.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="create_v2">
	<documentation>
 Create a new subscription.  This takes an an input a list of
 subscription details, one for each subscription requested.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="modify">
	<documentation>
 Modify a list of subscriptions.  This takes a list of subscription definitions representing the subscriptions that are
 to be modified.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="modify_v2">
	<documentation>
 Modify a list of subscriptions.  This takes a list of subscription
 definitions representing the subscriptions that are to be modified.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="remove">
	<documentation>
 Remove a list of subscriptions.  This takes as input a list of subscription id's and returns a list of status
 structures with the associated status code for each item in the id_list.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_list">
	<documentation>
 Retrieve the list of configured subscription identifiers.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="query">
	<documentation>
 Retrieve the subscription definitions for a list of subscription identifiers.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="query_v2">
	<documentation>
 Retrieve the subscription definitions for a list of subscription
 identifiers.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_available_event_types">
	<documentation>
 Retrieve a list of event types available on this system.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_state">
	<documentation>
 Set the enabled state of a list of subscriptions identifiers

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_state">
	<documentation>
 Get the enabled state of a list of subscription identifiers.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_url">
	<documentation>
 Set the url endpoint that implements the EventNotification interface.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_url">
	<documentation>
 Get the url endpoint that implements the EventNotification interface.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_authentication">
	<documentation>
 Set the credentials for the url's associated with the given list of subscription identifiers.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_authentication">
	<documentation>
 Gets the credentials for the URL's associated with a set of
 subscription identifiers.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_ttl">
	<documentation>
 Set the time to live (ttl) in seconds for the list of subscription identifiers. 

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_ttl">
	<documentation>
 Get the time to live (ttl) in seconds for the list of subscription identifiers.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_min_events_per_timeslice">
	<documentation>
 Set the minimum number of events needed to trigger a notification message.
This value is used to force a notification message to occur even if the 
max timeslice attribute is not reached yet.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_min_events_per_timeslice">
	<documentation>
 Get the minimum number of events needed to trigger a notification message.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_max_timeslice">
	<documentation>
 Set the maximum timeslice (in seconds) between event notifications.  This value is used
to ensure that notifications are sent despite the minimum event attribute not reaching
its threashold.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_max_timeslice">
	<documentation>
 Get the maximum timeslice (in seconds) between event notifications for the list of subscription identifiers.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="set_proxy_url">
	<documentation>
 Sets the proxy URL required for accessing the notification service
 for a set of subscriptions.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_proxy_url">
	<documentation>
 Gets the proxy URL required for accessing the notification service
 for a set of subscriptions.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_statistics">
	<documentation>
 Get the statistics for the given list of subscription identifiers.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="reset_statistics">
	<documentation>
 Reset the statistics for the given list of subscription identifiers.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="ping">
	<documentation>
 A lightweight ping to determine the event notification service's health.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>

	<operation name="get_version">
	<documentation>
 Gets the version information for this interface.

        	</documentation>
		<soap:operation soapAction="urn:iControl:Management/EventSubscription"/>
		<input>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</input>
		<output>
			<soap:body
				use="encoded"
				namespace="urn:iControl:Management/EventSubscription"
				encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"/>
		</output>
	</operation>
</binding>

<!-- service -->

<service name="Management.EventSubscription">
	<documentation>
 The EventSubscription interface is to be used to register for system configuration change events.  Events are sent using the EventNotification interface.

 This interface does not support transactions.

        	</documentation>
	<port name="Management.EventSubscriptionPort" binding="tns:Management.EventSubscriptionBinding">
		<soap:address location="https://url_to_service"/>
	</port>
</service>
</definitions>
